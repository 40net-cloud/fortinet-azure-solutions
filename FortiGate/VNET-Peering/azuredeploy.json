{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine"
      }
    },
    "fortiGateNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Name for FortiGate virtual appliances (A & B will be appended to the end of each respectively)"
      }
    },
    "fortiGateImageSKU": {
      "type": "string",
      "defaultValue": "fortinet_fg-vm",
      "allowedValues": [
        "fortinet_fg-vm",
        "fortinet_fg-vm_payg_2022"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately)"
      }
    },
    "fortiGateImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "6.2.0",
        "6.2.2",
        "6.2.4",
        "6.2.5",
        "6.4.0",
        "6.4.2",
        "6.4.3",
        "6.4.5",
        "6.4.6",
        "6.4.7",
        "6.4.8",
        "7.0.0",
        "7.0.1",
        "7.0.2",
        "7.0.3",
        "latest"
      ],
      "metadata": {
        "description": "Only 6.x has the A/P HA feature currently"
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_F4s",
      "allowedValues": [ "Standard_F4", "Standard_F4s", "Standard_F8", "Standard_F8s", "Standard_F8s_v2", "Standard_F16", "Standard_F16s", "Standard_F16s_v2" ],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }
    },
    "acceleratedNetworking": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": [ "true", "false" ],
      "metadata": {
        "description": "Accelerated Networking enables direct connection between the VM and network card. Only available on 2 CPU D/DSv2 and F/Fs and 4 CPU D/Dsv3, E/Esv3, Fsv2, Lsv2, Ms/Mms and Ms/Mmsv2"
      }
    },
    "publicIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose between an existing or new public IP for the External Azure Load Balancer"
      }
    },
    "publicIP2NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose between an existing or new public IP for the Active Fortigate"
      }
    },
    "publicIP3NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose between an existing or new public IP for the Passive Fortigate"
      }
    },
    "publicIPName": {
      "type": "string",
      "defaultValue": "FGTAPClusterPublicIP",
      "metadata": {
        "description": "Name of Public IP address element"
      }
    },
    "publicIPResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs"
      }
    },
    "publicIP2Name": {
      "type": "string",
      "defaultValue": "FGTAMgmtPublicIP",
      "metadata": {
        "description": "Name of Public IP address element"
      }
    },
    "publicIP2ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs"
      }
    },
    "publicIP3Name": {
      "type": "string",
      "defaultValue": "FGTBMgmtPublicIP",
      "metadata": {
        "description": "Name of Public IP address element"
      }
    },
    "publicIP3ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network (with new vnet the current resourcegroup is used)"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "ExternalSubnet",
      "metadata": {
        "description": "External Subnet"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/26",
      "metadata": {
        "description": "External Subnet Prefix"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "InternalSubnet",
      "metadata": {
        "description": "Internal Subnet"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.64/26",
      "metadata": {
        "description": "Internal Subnet Prefix"
      }
    },
    "subnet3Name": {
      "type": "string",
      "defaultValue": "HASyncSubnet",
      "metadata": {
        "description": "HA Sync Subnet 3 Name"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.128/26",
      "metadata": {
        "description": "HA Sync Subnet 3 Prefix"
      }
    },
    "subnet4Name": {
      "type": "string",
      "defaultValue": "ManagementSubnet",
      "metadata": {
        "description": "Management Subnet 4 Name"
      }
    },
    "subnet4Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.192/26",
      "metadata": {
        "description": "Management Subnet 4 Prefix"
      }
    },
    "subnet5Name": {
      "type": "string",
      "defaultValue": "ProtectedASubnet",
      "metadata": {
        "description": "Protected A Subnet 5 Name"
      }
    },
    "subnet5Prefix": {
      "type": "string",
      "defaultValue": "172.16.137.0/24",
      "metadata": {
        "description": "Protected A Subnet 5 Prefix"
      }
    },
    "subnet6Name": {
      "type": "string",
      "defaultValue": "ProtectedBSubnet",
      "metadata": {
        "description": "Protected B Subnet 6 Name"
      }
    },
    "subnet6Prefix": {
      "type": "string",
      "defaultValue": "172.16.138.0/24",
      "metadata": {
        "description": "Protected B Subnet 6 Prefix"
      }
    },
    "vnetNewOrExistingSpoke1": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetNameSpoke1": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network for Spoke1"
      }
    },
    "vnetResourceGroupSpoke1": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network Spoke 1 (with new vnet the current resourcegroup is used)"
      }
    },
    "subnet1Spoke1Name": {
      "type": "string",
      "defaultValue": "SPOKE1Subnet",
      "metadata": {
        "description": "Subnet 1 Spoke 1"
      }
    },
    "subnet1Spoke1Prefix": {
      "type": "string",
      "defaultValue": "172.16.140.0/26",
      "metadata": {
        "description": "Subnet 1 Spoke 1"
      }
    },
    "vnetAddressPrefixSpoke1": {
      "type": "string",
      "defaultValue": "172.16.140.0/24",
      "metadata": {
        "description": "Virtual Network Address prefix for Spoke 1"
      }
    },
    "vnetNewOrExistingSpoke2": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetNameSpoke2": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network for Spoke1"
      }
    },
    "vnetResourceGroupSpoke2": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network Spoke 1 (with new vnet the current resourcegroup is used)"
      }
    },
    "vnetAddressPrefixSpoke2": {
      "type": "string",
      "defaultValue": "172.16.142.0/24",
      "metadata": {
        "description": "Virtual Network Address prefix for Spoke 2"
      }
    },
    "subnet1Spoke2Name": {
      "type": "string",
      "defaultValue": "SPOKE2Subnet",
      "metadata": {
        "description": "Subnet 1 Spoke 2"
      }
    },
    "subnet1Spoke2Prefix": {
      "type": "string",
      "defaultValue": "172.16.142.0/26",
      "metadata": {
        "description": "Subnet 1 Spoke 2"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "fortinetTags": {
      "type": "object",
      "defaultValue": {
        "publisher": "Fortinet",
        "template": "VNET Peering",
        "provider": "6EB3B02F-50E5-4A3E-8CB8-2E12925831AB-VNETPeering"
      }
    }
  },
  "variables": {
    "imagePublisher": "fortinet",
    "imageOffer": "fortinet_fortigate-vm_v5",

    "compute_AvailabilitySet_FG_Name": "[concat(parameters('fortiGateNamePrefix'),'-AvailabilitySet')]",
    "compute_AvailabilitySet_FG_Id": "[resourceId('Microsoft.Compute/availabilitySets', variables('compute_AvailabilitySet_FG_Name'))]",

    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('fortiGateNamePrefix'),'-VNET'),parameters('vnetName'))]",
    "vnetId": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks', variables('vnetName')))]",
    "subnet1Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')))]",
    "subnet2Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')))]",
    "subnet3Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet3Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet3Name')))]",
    "subnet4Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet4Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet4Name')))]",
    "vnetNameSpoke1": "[if(equals(parameters('vnetNameSpoke1'),''),concat(parameters('fortiGateNamePrefix'),'-VNET-SPOKE1'),parameters('vnetNameSpoke1'))]",
    "vnetIdSpoke1": "[if(equals(parameters('vnetNewOrExistingSpoke1'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetNameSpoke1')),resourceId(parameters('vnetResourceGroupSpoke1'),'Microsoft.Network/virtualNetworks', variables('vnetNameSpoke1')))]",
    "vnetNameSpoke2": "[if(equals(parameters('vnetNameSpoke2'),''),concat(parameters('fortiGateNamePrefix'),'-VNET-SPOKE2'),parameters('vnetNameSpoke2'))]",
    "vnetIdSpoke2": "[if(equals(parameters('vnetNewOrExistingSpoke2'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetNameSpoke2')),resourceId(parameters('vnetResourceGroupSpoke2'),'Microsoft.Network/virtualNetworks', variables('vnetNameSpoke2')))]",

    "fgaVmName": "[concat(parameters('fortiGateNamePrefix'),'-FGT-A')]",
    "fgbVmName": "[concat(parameters('fortiGateNamePrefix'),'-FGT-B')]",
    "fgaCustomData": "[base64(concat('config system sdn-connector\nedit AzureSDN\nset type azure\nend\nend\nconfig router static\nedit 1\nset gateway ', variables('sn1GatewayIP'), '\nset device port1\nnext\nedit 2\nset dst ', parameters('vnetAddressPrefix'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nnext\nedit 3\nset dst 168.63.129.16 255.255.255.255\nset device port2\nset gateway ', variables ('sn2GatewayIP'), '\nnext\nedit 4\nset dst 168.63.129.16 255.255.255.255\nset device port1\nset gateway ', variables ('sn1GatewayIP'), '\nnext\nedit 5\nset dst ', parameters('vnetAddressPrefixSpoke1'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nset comment Spoke1-Subnet\nnext\nedit 6\nset dst ', parameters('vnetAddressPrefixSpoke2'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nset comment Spoke2-Subnet\nnext\nend\nconfig system probe-response\nset http-probe-value OK\nset mode http-probe\nend\nconfig system interface\nedit port1\nset mode static\nset ip ',  variables('sn1IPfga'), '/', variables('sn1CIDRmask'), '\nset description external\nset allowaccess probe-response\nnext\nedit port2\nset mode static\nset ip ', variables('sn2IPfga'), '/', variables('sn2CIDRmask'), '\nset description internal\nset allowaccess probe-response\nnext\nedit port3\nset mode static\nset ip ', variables('sn3IPfga'), '/', variables('sn3CIDRmask'), '\nset description hasyncport\nnext\nedit port4\nset mode static\nset ip ', variables('sn4IPfga'), '/', variables('sn4CIDRmask'), '\nset description hammgmtport\nset allowaccess ping https ssh ftm\nnext\nend\nconfig firewall address\nedit Spoke1-subnet\nset associated-interface port2\nset subnet ', parameters('subnet1Spoke1Prefix'), '\nnext\nedit Spoke2-subnet\nset associated-interface port2\nset subnet ', parameters('subnet1Spoke2Prefix'), '\nnext\nedit ProtectedASubnet\nset associated-interface port2\nset subnet ', parameters('subnet5Prefix'), '\nnext\nedit ProtectedBSubnet\nset associated-interface port2\nset subnet ', parameters('subnet6Prefix'), '\nnext\nend\nconfig firewall policy\nedit 1\nset name Spoke1subnet-to-Spoke2subnet\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke1-subnet\nset dstaddr Spoke2-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 2\nset name Spoke2subnet-to-Spoke1subnet\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke2-subnet\nset dstaddr Spoke1-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 3\nset name SpokesSubnets-to-ProtectedSubnets\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke1-subnet Spoke2-subnet\nset dstaddr ProtectedASubnet ProtectedBSubnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 4\nset name ProtectedSubnets-to-SpokeSubnets\nset srcintf port2\nset dstintf port2\nset srcaddr ProtectedASubnet ProtectedBSubnet\nset dstaddr Spoke1-subnet Spoke2-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 5\nset name Protected&SpokeSubnets-to-Internet\nset srcintf port2\nset dstintf port1\nset srcaddr ProtectedASubnet ProtectedBSubnet Spoke1-subnet Spoke2-subnet\nset dstaddr all\nset action accept\nset schedule always\nset service ALL\nset utm-status enable\nset fsso disable\nset av-profile default\nset webfilter-profile default\nset dnsfilter-profile default\nset ips-sensor default\nset application-list default\nset ssl-ssh-profile certificate-inspection\nset nat enable\nnext\nend\nconfig system ha\nset group-name AzureHA\nset mode a-p\nset hbdev port3 100\nset session-pickup enable\nset session-pickup-connectionless enable\nset ha-mgmt-status enable\nconfig ha-mgmt-interfaces\nedit 1\nset interface port4\nset gateway ', variables('sn4GatewayIP'),'\nnext\nend\nset override disable\nset priority 255\nset unicast-hb enable\nset unicast-hb-peerip ', variables('sn3IPfgb'), '\n end'))]",
    "fgbCustomData": "[base64(concat('config system sdn-connector\nedit AzureSDN\nset type azure\nend\nend\nconfig router static\nedit 1\nset gateway ', variables('sn1GatewayIP'), '\nset device port1\nnext\nedit 2\nset dst ', parameters('vnetAddressPrefix'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nnext\nedit 3\nset dst 168.63.129.16 255.255.255.255\nset device port2\nset gateway ', variables ('sn2GatewayIP'), '\nnext\nedit 4\nset dst 168.63.129.16 255.255.255.255\nset device port1\nset gateway ', variables ('sn1GatewayIP'), '\nnext\nedit 5\nset dst ', parameters('vnetAddressPrefixSpoke1'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nset comment Spoke1-Subnet\nnext\nedit 6\nset dst ', parameters('vnetAddressPrefixSpoke2'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nset comment Spoke2-Subnet\nnext\nend\nconfig system probe-response\nset http-probe-value OK\nset mode http-probe\nend\nconfig system interface\nedit port1\nset mode static\nset ip ',  variables('sn1IPfgb'), '/', variables('sn1CIDRmask'), '\nset description external\nset allowaccess probe-response\nnext\nedit port2\nset mode static\nset ip ', variables('sn2IPfgb'), '/', variables('sn2CIDRmask'), '\nset description internal\nset allowaccess probe-response\nnext\nedit port3\nset mode static\nset ip ', variables('sn3IPfgb'), '/', variables('sn3CIDRmask'), '\nset description hasyncport\nnext\nedit port4\nset mode static\nset ip ', variables('sn4IPfgb'), '/', variables('sn4CIDRmask'), '\nset description hammgmtport\nset allowaccess ping https ssh ftm\nnext\nend\nconfig firewall address\nedit Spoke1-subnet\nset associated-interface port2\nset subnet ', parameters('subnet1Spoke1Prefix'), '\nnext\nedit Spoke2-subnet\nset associated-interface port2\nset subnet ', parameters('subnet1Spoke2Prefix'), '\nnext\nedit ProtectedASubnet\nset associated-interface port2\nset subnet ', parameters('subnet5Prefix'), '\nnext\nedit ProtectedBSubnet\nset associated-interface port2\nset subnet ', parameters('subnet6Prefix'), '\nnext\nend\nconfig firewall policy\nedit 1\nset name Spoke1subnet-to-Spoke2subnet\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke1-subnet\nset dstaddr Spoke2-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 2\nset name Spoke2subnet-to-Spoke1subnet\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke2-subnet\nset dstaddr Spoke1-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 3\nset name SpokesSubnets-to-ProtectedSubnets\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke1-subnet Spoke2-subnet\nset dstaddr ProtectedASubnet ProtectedBSubnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 4\nset name ProtectedSubnets-to-SpokeSubnets\nset srcintf port2\nset dstintf port2\nset srcaddr ProtectedASubnet ProtectedBSubnet\nset dstaddr Spoke1-subnet Spoke2-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 5\nset name Protected&SpokeSubnets-to-Internet\nset srcintf port2\nset dstintf port1\nset srcaddr ProtectedASubnet ProtectedBSubnet Spoke1-subnet Spoke2-subnet\nset dstaddr all\nset action accept\nset schedule always\nset service ALL\nset utm-status enable\nset fsso disable\nset av-profile default\nset webfilter-profile default\nset dnsfilter-profile default\nset ips-sensor default\nset application-list default\nset ssl-ssh-profile certificate-inspection\nset nat enable\nnext\nend\nconfig system ha\nset group-name AzureHA\nset mode a-p\nset hbdev port3 100\nset session-pickup enable\nset session-pickup-connectionless enable\nset ha-mgmt-status enable\nconfig ha-mgmt-interfaces\nedit 1\nset interface port4\nset gateway ', variables('sn4GatewayIP'),'\nnext\nend\nset override disable\nset priority 1\nset unicast-hb enable\nset unicast-hb-peerip ', variables('sn3IPfga'), '\n end'))]",

    "routeTableProtectedAName": "[concat(parameters('fortiGateNamePrefix'),'-RT-PROTECTED-A')]",
    "routeTableProtectedAId": "[resourceId('Microsoft.Network/routeTables',variables('routeTableProtectedAName'))]",
    "routeTableProtectedBName": "[concat(parameters('fortiGateNamePrefix'),'-RT-PROTECTED-B')]",
    "routeTableProtectedBId": "[resourceId('Microsoft.Network/routeTables',variables('routeTableProtectedBName'))]",
    "routeTableSpoke1Name": "[concat(parameters('fortiGateNamePrefix'),'-RT-SPOKE-1')]",
    "routeTableSpoke1Id": "[resourceId('Microsoft.Network/routeTables',variables('routeTableSpoke1Name'))]",
    "routeTableSpoke2Name": "[concat(parameters('fortiGateNamePrefix'),'-RT-SPOKE-2')]",
    "routeTableSpoke2Id": "[resourceId('Microsoft.Network/routeTables',variables('routeTableSpoke2Name'))]",

    "hubtoSpoke1PeeringName": "[concat(variables('vnetName'), 'To', variables('vnetNameSpoke1'))]",
    "spoke1toHubPeeringName": "[concat(variables('vnetNameSpoke1'), 'To', variables('vnetName'))]",
    "hubtoSpoke2PeeringName": "[concat(variables('vnetName'), 'To', variables('vnetNameSpoke2'))]",
    "spoke2toHubPeeringName": "[concat(variables('vnetNameSpoke2'), 'To', variables('vnetName'))]",

    "fgaNic1Name": "[concat(variables('fgaVmName'),'-Nic1')]",
    "fgaNic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic1Name'))]",
    "fgaNic2Name": "[concat(variables('fgaVmName'),'-Nic2')]",
    "fgaNic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic2Name'))]",
    "fgbNic1Name": "[concat(variables('fgbVmName'),'-Nic1')]",
    "fgbNic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic1Name'))]",
    "fgbNic2Name": "[concat(variables('fgbVmName'),'-Nic2')]",
    "fgbNic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic2Name'))]",
    "fgaNic3Name": "[concat(variables('fgaVmName'),'-Nic3')]",
    "fgaNic3Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic3Name'))]",
    "fgbNic3Name": "[concat(variables('fgbVmName'),'-Nic3')]",
    "fgbNic3Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic3Name'))]",
    "fgaNic4Name": "[concat(variables('fgaVmName'),'-Nic4')]",
    "fgaNic4Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic4Name'))]",
    "fgbNic4Name": "[concat(variables('fgbVmName'),'-Nic4')]",
    "fgbNic4Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic4Name'))]",

    "publicIPName": "[if(equals(parameters('publicIPName'),''),concat(parameters('fortiGateNamePrefix'),'-FGT-PIP'),parameters('publicIPName'))]",
    "publicIPId": "[if(equals(parameters('publicIPNewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName')),resourceId(parameters('publicIPResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIPName')))]",
    "publicIP2Name": "[if(equals(parameters('publicIP2Name'),''),concat(parameters('fortiGateNamePrefix'),'-FGT-A-MGMT-PIP'),parameters('publicIP2Name'))]",
    "publicIP2Id": "[if(equals(parameters('publicIP2NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP2Name')),resourceId(parameters('publicIP2ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP2Name')))]",
    "publicIP3Name": "[if(equals(parameters('publicIP3Name'),''),concat(parameters('fortiGateNamePrefix'),'-FGT-B-MGMT-PIP'),parameters('publicIP3Name'))]",
    "publicIP3Id": "[if(equals(parameters('publicIP3NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP3Name')),resourceId(parameters('publicIP3ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP3Name')))]",

    "NSGName": "[concat(parameters('fortiGateNamePrefix'),'-',uniqueString(resourceGroup().id),'-NSG')]",
    "NSGId": "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",

    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
    "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
    "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
    "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
    "sn1IPfga": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),5))]",
    "sn1IPfgb": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),6))]",

    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
    "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
    "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
    "sn2IPArray3": "[string(add(int(variables('sn2IPArray2nd')[0]),1))]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2GatewayIP": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPArray3'))]",
    "sn2IPlb": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),4))]",
    "sn2IPfga": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),5))]",
    "sn2IPfgb": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),6))]",

    "sn3IPArray": "[split(parameters('subnet3Prefix'),'.')]",
    "sn3IPArray2ndString": "[string(variables('sn3IPArray')[3])]",
    "sn3IPArray2nd": "[split(variables('sn3IPArray2ndString'),'/')]",
    "sn3CIDRmask": "[string(int(variables('sn3IPArray2nd')[1]))]",
    "sn3IPArray2": "[string(int(variables('sn3IPArray')[2]))]",
    "sn3IPArray1": "[string(int(variables('sn3IPArray')[1]))]",
    "sn3IPArray0": "[string(int(variables('sn3IPArray')[0]))]",
    "sn3IPfga": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(int(variables('sn3IPArray2nd')[0]),5))]",
    "sn3IPfgb": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(int(variables('sn3IPArray2nd')[0]),6))]",

    "sn4IPArray": "[split(parameters('subnet4Prefix'),'.')]",
    "sn4IPArray2ndString": "[string(variables('sn4IPArray')[3])]",
    "sn4IPArray2nd": "[split(variables('sn4IPArray2ndString'),'/')]",
    "sn4CIDRmask": "[string(int(variables('sn4IPArray2nd')[1]))]",
    "sn4IPArray3": "[string(add(int(variables('sn4IPArray2nd')[0]),1))]",
    "sn4IPArray2": "[string(int(variables('sn4IPArray')[2]))]",
    "sn4IPArray1": "[string(int(variables('sn4IPArray')[1]))]",
    "sn4IPArray0": "[string(int(variables('sn4IPArray')[0]))]",
    "sn4GatewayIP": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',variables('sn4IPArray3'))]",
    "sn4IPfga": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',add(int(variables('sn4IPArray2nd')[0]),5))]",
    "sn4IPfgb": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',add(int(variables('sn4IPArray2nd')[0]),6))]",

    "internalLBName": "[concat(parameters('fortiGateNamePrefix'),'-InternalLoadBalancer')]",
    "internalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('internalLBName'))]",
    "internalLBFEName": "[concat(parameters('fortiGateNamePrefix'),'-ILB-',parameters('subnet2Name'),'-FrontEnd')]",
    "internalLBFEId": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations/',variables('internalLBName'),variables('internalLBFEName'))]",
    "internalLBBEName": "[concat(parameters('fortiGateNamePrefix'),'-ILB-',parameters('subnet2Name'),'-BackEnd')]",
    "internalLBBEId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools/',variables('internalLBName'),variables('internalLBBEName'))]",
    "internalLBProbeName": "lbprobe",
    "internalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes/',variables('internalLBName'),variables('internalLBProbeName'))]",

    "externalLBName": "[concat(parameters('fortiGateNamePrefix'),'-ExternalLoadBalancer')]",
    "externalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLBName'))]",
    "externalLBFEName": "[concat(parameters('fortiGateNamePrefix'),'externalLBFE')]",
    "externalLBFEId": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations/',variables('externalLBName'),variables('externalLBFEName'))]",
    "externalLBBEName": "[concat(parameters('fortiGateNamePrefix'),'externalLBBE')]",
    "externalLBBEId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools/',variables('externalLBName'),variables('externalLBBEName'))]",
    "externalLBProbeName": "lbprobe",
    "externalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes/',variables('externalLBName'),variables('externalLBProbeName'))]"
  },
  "resources": [
    {
      "apiVersion": "2020-10-01",
      "name": "pid-2dc4b447-552f-557f-b1cc-2faec6f9f133",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "apiVersion": "2021-07-01",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('compute_AvailabilitySet_FG_Name')]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableProtectedAName')]",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet5Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableProtectedBName')]",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet6Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableSpoke1Name')]",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefixSpoke1')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke1Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableSpoke2Name')]",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefixSpoke2')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke2Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('routeTableProtectedAId')]",
        "[variables('routeTableProtectedBId')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet4Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet4Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet5Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet5Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableProtectedAId')]"
              }
            }
          },
          {
            "name": "[parameters('subnet6Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet6Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableProtectedBId')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
          "apiVersion": "2020-11-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('hubtoSpoke1PeeringName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('vnetName')]",
            "[variables('vnetNameSpoke1')]"
          ],
          "comments": "Hub to Spoke 1",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": true,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[variables('vnetIdSpoke1')]"
            }
          }
        },
        {
          "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
          "apiVersion": "2020-11-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('hubtoSpoke2PeeringName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('vnetName')]",
            "[variables('vnetNameSpoke2')]"
          ],
          "comments": "HUB to Spoke 2",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": true,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[variables('vnetIdSpoke2')]"
            }
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('vnetNewOrExistingSpoke1'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[variables('vnetNameSpoke1')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('routeTableSpoke1Id')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefixSpoke1')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Spoke1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke1Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableSpoke1Id')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2020-11-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('spoke1toHubPeeringName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('vnetName')]",
            "[variables('vnetNameSpoke1')]"
          ],
          "comments": "Spoke 1 to Hub",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": true,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[variables('vnetId')]"
            }
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('vnetNewOrExistingSpoke2'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[variables('vnetNameSpoke2')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('routeTableSpoke2Id')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefixSpoke2')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Spoke2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke2Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableSpoke2Id')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2020-11-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('spoke2toHubPeeringName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('vnetName')]",
            "[variables('vnetNameSpoke2')]"
          ],
          "comments": "Spoke 2 to Hub",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": true,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[variables('vnetId')]"
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('internalLBName')]",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('internalLBFEName')]",
            "properties": {
              "privateIPAddress": "[variables('sn2IPlb')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('internalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('internalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('internalLBBEId')]"
              },
              "probe": {
                "id": "[variables('internalLBProbeId')]"
              },
              "protocol": "all",
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "lbruleFE2all"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8008,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "[variables('internalLBProbeName')]"
          }
        ]
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('NSGName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAllInbound",
            "properties": {
              "description": "Allow all in",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('publicIPNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "name": "[variables('publicIPName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "condition": "[equals(parameters('publicIP2NewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "name": "[variables('publicIP2Name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "condition": "[equals(parameters('publicIP3NewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "name": "[variables('publicIP3Name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('externalLBName')]",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('publicIPId')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('externalLBFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('externalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "PublicLBRule-FE1-http"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Udp",
              "frontendPort": 10551,
              "backendPort": 10551,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5
            },
            "name": "PublicLBRule-FE1-udp10551"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8008,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "[variables('externalLBProbeName')]"
          }
        ]
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgaNic1Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('externalLBId')]",
        "[variables('NSGName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfga')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgbNic1Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('externalLBId')]",
        "[variables('NSGName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfgb')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgaNic2Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('internalLBId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn2IPfga')]",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('internalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgbNic2Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('internalLBId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn2IPfgb')]",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('internalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgaNic3Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn3IPfga')]",
              "subnet": {
                "id": "[variables('subnet3Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgbNic3Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn3IPfgb')]",
              "subnet": {
                "id": "[variables('subnet3Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgaNic4Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn4IPfga')]",
              "publicIPAddress": {
                "id": "[variables('publicIP2Id')]"
              },
              "subnet": {
                "id": "[variables('subnet4Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgbNic4Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn4IPfgb')]",
              "publicIPAddress": {
                "id": "[variables('publicIP3Id')]"
              },
              "subnet": {
                "id": "[variables('subnet4Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fgaVmName')]",
      "apiVersion": "2021-07-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('location')]",
      "plan": {
        "name": "[parameters('fortiGateImageSKU')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('fgaNic1Id')]",
        "[variables('fgaNic2Id')]",
        "[variables('fgaNic3Id')]",
        "[variables('fgaNic4Id')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('compute_AvailabilitySet_FG_Id')]"
        },
        "osProfile": {
          "computerName": "[variables('fgaVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('fgaCustomData')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('fortiGateImageSKU')]",
            "version": "[parameters('FortigateImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('fgaNic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgaNic2Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgaNic3Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgaNic4Id')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fgbVmName')]",
      "apiVersion": "2021-07-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('location')]",
      "plan": {
        "name": "[parameters('fortiGateImageSKU')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('fgbNic1Id')]",
        "[variables('fgbNic2Id')]",
        "[variables('fgbNic3Id')]",
        "[variables('fgbNic4Id')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('compute_AvailabilitySet_FG_Id')]"
        },
        "osProfile": {
          "computerName": "[variables('fgbVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('fgbCustomData')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('fortiGateImageSKU')]",
            "version": "[parameters('FortigateImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('fgbNic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgbNic2Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgbNic3Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgbNic4Id')]"
            }
          ]
        }
      }
    }
  ]
}
