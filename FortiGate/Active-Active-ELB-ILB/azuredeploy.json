{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "FortiGateNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Name for FortiGate virtual appliances (A & B will be appended to the end of each respectively)."
      }
    },
    "FortiGateImageSKU": {
      "type": "string",
      "defaultValue": "fortinet_fg-vm",
      "allowedValues": [
        "fortinet_fg-vm",
        "fortinet_fg-vm_payg"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately)"
      }
    },
    "FortiGateImageVersion": {
      "type": "string",
      "defaultValue": "6.0.4",
      "allowedValues": [ "latest", "6.2.0", "6.0.4", "6.0.3", "6.0.2", "6.0.0", "5.6.6" ],
      "metadata": {
        "description": "Select image version."
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_F1s",
      "allowedValues": [ "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_F1", "Standard_F2", "Standard_F4", "Standard_F8", "Standard_F1s_v2", "Standard_F2s_v2", "Standard_F4s_v2", "Standard_F8s_v2" ],
      "metadata": {
        "description": "Virtual Machine size selection"
      }
    },
    "publicIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify if to use a public IP, and if so whether it's new"
      }
    },
    "publicIP2NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Whether to use a public IP and if so whether it is new"
      }
    },
    "publicIPName": {
      "type": "string",
      "defaultValue": "FGTLBPublicIP",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIPResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "publicIP2Name": {
      "type": "string",
      "defaultValue": "FGTLBPublicIP2",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIP2ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "publicIPAddressType": {
      "type": "string",
      "defaultValue": "Static",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Type of public IP address"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network."
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the virtual network - or new resource group from above (if new vnet)"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "EntrySubnet",
      "metadata": {
        "description": "Subnet 1 Name"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "TransitSubnet",
      "metadata": {
        "description": "Subnet 2 Name"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "10.0.2.0/24",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet3Name": {
      "type": "string",
      "defaultValue": "ProtectedSubnet",
      "metadata": {
        "description": "Subnet 3 Name"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "10.0.3.0/24",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "FortinetTags": {
    "type": "object",
    "defaultValue": {
      "provider": "6EB3B02F-50E5-4A3E-8CB8-2E129258317D"
      }
    }
  },
  "variables": {
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-11-01",

    "imagePublisher": "fortinet",
    "imageOffer": "fortinet_fortigate-vm_v5",

    "availabilitySetName": "[concat(parameters('FortiGateNamePrefix'),'-AvailabilitySet')]",
    "availabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",

    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('FortiGateNamePrefix'),'-VNET'),parameters('vnetName'))]",
    "vnetID": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks', variables('vnetName')))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet1Name'))]",
    "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet2Name'))]",

    "fg1VmName": "[concat(parameters('FortiGateNamePrefix'),'-FGT-A')]",
    "fg2VmName": "[concat(parameters('FortiGateNamePrefix'),'-FGT-B')]",

    "routeTable3Name": "[concat(parameters('FortiGateNamePrefix'),'-',parameters('subnet3Name'),'-','RouteTable')]",
    "routeTable3Ref": "[resourceId('Microsoft.Network/routeTables',variables('routeTable3Name'))]",

    "network_NIC_fg11_Name": "[concat(variables('fg1VmName'),'-Nic0')]",
    "network_NIC_fg11_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg11_Name'))]",
    "network_NIC_fg12_Name": "[concat(variables('fg1VmName'),'-Nic1')]",
    "network_NIC_fg12_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg12_Name'))]",
    "network_NIC_fg21_Name": "[concat(variables('fg2VmName'),'-Nic0')]",
    "network_NIC_fg21_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg21_Name'))]",
    "network_NIC_fg22_Name": "[concat(variables('fg2VmName'),'-Nic1')]",
    "network_NIC_fg22_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg22_Name'))]",

    "publicIPName": "[if(equals(parameters('publicIPName'),''),concat(parameters('FortiGateNamePrefix'),'-FGT-PIP'),parameters('publicIPName'))]",
    "publicIP2Name": "[if(equals(parameters('publicIP2Name'),''),concat(parameters('FortiGateNamePrefix'),'-FGT-PIP2'),parameters('publicIP2Name'))]",
    "publicIPID": "[if(equals(parameters('publicIPNewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName')),resourceId(parameters('publicIPResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIPName')))]",
    "publicIP2ID": "[if(equals(parameters('publicIP2NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP2Name')),resourceId(parameters('publicIP2ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP2Name')))]",

    "nsgName": "[concat(parameters('FortiGateNamePrefix'),'-',uniqueString(resourceGroup().id),'-NSG')]",

    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
    "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
    "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
    "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
    "sn1IPfg1": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),5))]",
    "sn1IPfg2": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),6))]",

    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
    "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
    "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
    "sn2IPArray3": "[string(add(int(variables('sn2IPArray2nd')[0]),1))]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2GatewayIP": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPArray3'))]",
    "sn2IPlb": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),4))]",
    "sn2IPfg1": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),5))]",
    "sn2IPfg2": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),6))]",

    "internalLBName": "[concat(parameters('FortiGateNamePrefix'),'-InternalLoadBalancer')]",
    "internalLBFE2Name": "[concat(parameters('FortiGateNamePrefix'),'-ILB-',parameters('subnet2Name'),'-FrontEnd')]",
    "internalLBBE2Name": "[concat(parameters('FortiGateNamePrefix'),'-ILB-',parameters('subnet2Name'),'-BackEnd')]",
    "internalLBid": "[resourceID('Microsoft.Network/loadBalancers',variables('internalLBName'))]",
    "internalLB_BE2Id": "[concat(variables('internalLBid'),'/backendAddressPools/',variables('internalLBBE2Name'))]",

    "externalLBName_NatRule_FGAdminPerm_fg1": "[concat(variables('fg1VmName'),'FGAdminPerm')]",
    "externalLBId_NatRule_FGAdminPerm_fg1": "[concat(variables('externalLBId'),'/inboundNatRules/',variables('externalLBName_NatRule_FGAdminPerm_fg1'))]",
    "externalLBName_NatRule_SSH_fg1": "[concat(variables('fg1VmName'),'SSH')]",
    "externalLBId_NatRule_SSH_fg1": "[concat(variables('externalLBId'),'/inboundNatRules/',variables('externalLBName_NatRule_SSH_fg1'))]",
    "externalLBName_NatRule_FGAdminPerm_fg2": "[concat(variables('fg2VmName'),'FGAdminPerm')]",
    "externalLBId_NatRule_FGAdminPerm_fg2": "[concat(variables('externalLBId'),'/inboundNatRules/',variables('externalLBName_NatRule_FGAdminPerm_fg2'))]",
    "externalLBName_NatRule_SSH_fg2": "[concat(variables('fg2VmName'),'SSH')]",
    "externalLBId_NatRule_SSH_fg2": "[concat(variables('externalLBId'),'/inboundNatRules/',variables('externalLBName_NatRule_SSH_fg2'))]",
    "externalLBName": "[concat(parameters('FortiGateNamePrefix'),'-PublicLoadBalancer')]",
    "externalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLBName'))]",
    "externalLBNameFE": "[concat(parameters('FortiGateNamePrefix'),'publicLBFE')]",
    "externalLBIdFE": "[concat(variables('externalLBId'),'/frontendIPConfigurations/',variables('externalLBNameFE'))]",
    "externalLBNameFE2": "[concat(parameters('FortiGateNamePrefix'),'publicLBFE2')]",
    "externalLBIdFE2": "[concat(variables('externalLBId'),'/frontendIPConfigurations/',variables('externalLBNameFE2'))]",
    "externalLBNameBE": "[concat(parameters('FortiGateNamePrefix'),'publicLBBE')]",
    "externalLBIdBE": "[concat(variables('externalLBId'),'/backendAddressPools/',variables('externalLBNameBE'))]"
  },
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "name": "pid-09ed3dc3-4cf7-5410-b01c-c9bdfc039530",
      "type": "Microsoft.Resources/deployments",
      "properties":{
       "mode": "Incremental",
       "template": {
         "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deplymentTemplate.json#",
         "contentVersion": "1.0.0.0",
         "resources": []
       } 
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "location": "[resourceGroup().location]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2
      },
      "sku": {
        "name":  "Aligned"
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('routeTable3Ref')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]",
              "routeTable": {
                "id": "[variables('routeTable3Ref')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('internalLBName')]",
      "location": "[resourceGroup().location]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('internalLBFE2Name')]",
            "properties": {
              "privateIPAddress": "[variables('sn2IPlb')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('internalLBBE2Name')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/frontendIpConfigurations/', variables('internalLBFE2Name'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/backendAddressPools/', variables('internalLBBE2Name'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLBName')), '/probes/lbprobe')]"
              },
              "protocol": "all",
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "lbruleFE2all"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTable3Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "properties": {
        "routes": [
          {
            "name": "toDefault",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPlb')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('nsgName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[resourceGroup().location]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "AllowAllInbound",
            "properties": {
              "description": "Allow all in",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('publicIPNewOrExisting'), 'new')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPAddressType')]"
      }
    },
    {
      "condition": "[equals(parameters('publicIP2NewOrExisting'), 'new')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIP2Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('externalLBName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "sku": 
      {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('publicIPID')]",
        "[variables('publicIP2ID')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('externalLBNameFE')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPID')]"
              }
            }
          },
          {
            "name": "[variables('externalLBNameFE2')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIP2ID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('externalLBNameBE')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/', variables('externalLBNameFE'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/', variables('externalLBNameBE'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "PublicLBRule-FE1-http"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/', variables('externalLBNameFE2'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/', variables('externalLBNameBE'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "PublicLBRule-FE2-http"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/frontendIpConfigurations/', variables('externalLBNameFE'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/backendAddressPools/', variables('externalLBNameBE'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLBName')), '/probes/lbprobe')]"
              },
              "protocol": "Udp",
              "frontendPort": 10551,
              "backendPort": 10551,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5
            },
            "name": "PublicLBRule-FE1-udp10551"
          }
        ],
        "inboundNatRules": [
          {
            "name": "[variables('externalLBName_NatRule_SSH_fg1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBIdFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": 22,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_FGAdminPerm_fg1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBIdFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_SSH_fg2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBIdFE2')]"
              },
              "protocol": "Tcp",
              "frontendPort": 22,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_FGAdminPerm_fg2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBIdFE2')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8008,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg11_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('externalLBId')]",
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfg1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBIdBE')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[variables('externalLBId_NatRule_SSH_fg1')]"
                },
                {
                  "id": "[variables('externalLBId_NatRule_FGAdminPerm_fg1')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg21_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('externalLBId')]",
        "[variables('network_NIC_fg11_Name')]",
        "[variables('vnetName')]",
        "[variables('nsgName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfg2')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBIdBE')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[variables('externalLBId_NatRule_SSH_fg2')]"
                },
                {
                  "id": "[variables('externalLBId_NatRule_FGAdminPerm_fg2')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg12_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('internalLBName'))]",
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfg1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('internalLB_BE2Id')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg22_Name')]",
      "location": "[resourceGroup().location]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('internalLBName'))]",
        "[variables('vnetName')]",
        "[variables('network_NIC_fg12_Name')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfg2')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('internalLB_BE2Id')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fg1VmName')]",
      "location": "[resourceGroup().location]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "plan": {
        "name": "[parameters('FortiGateImageSKU')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('network_NIC_fg12_Name')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('availabilitySetId')]"
        },
        "osProfile": {
          "computerName": "[variables('fg1VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('config system probe-response\n set mode http-probe\n end\n config router static\n edit 1\n set gateway ', variables('sn1GatewayIP'), '\n set device port1\n next\n edit 2\n set dst ', parameters('vnetAddressPrefix'), '\n set gateway ', variables('sn2GatewayIP'), '\n set device port2\n next\n edit 3\nset dst 168.63.129.16 255.255.255.255\nset device port2\n set gateway ', variables ('sn2GatewayIP'), '\n next\nedit 4\nset dst 168.63.129.16 255.255.255.255\nset device port1\n set gateway ', variables ('sn1GatewayIP'), '\n next\n end\n config system interface\n edit port1\n set mode static\n set ip ', variables('sn1IPfg1'), '/', variables('sn1CIDRmask'), '\n set description external\n next\n edit port2\n set mode static\n set ip ', variables('sn2IPfg1'), '/', variables('sn2CIDRmask'), '\n set description internal\n  set allowaccess ping ssh\n next\n end'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('FortiGateImageSKU')]",
            "version": "[parameters('FortiGateImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('network_NIC_fg11_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg12_Id')]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fg2VmName')]",
      "location": "[resourceGroup().location]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "plan": {
        "name": "[parameters('FortiGateImageSKU')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('network_NIC_fg22_Name')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('availabilitySetId')]"
        },
        "osProfile": {
          "computerName": "[variables('fg2VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(concat('config system probe-response\n set mode http-probe\n end\n config router static\n edit 1\n set gateway ', variables('sn1GatewayIP'), '\n set device port1\n next\n edit 2\n set dst ', parameters('vnetAddressPrefix'), '\n set gateway ', variables('sn2GatewayIP'), '\n set device port2\n next\n edit 3\nset dst 168.63.129.16 255.255.255.255\nset device port2\n set gateway ', variables ('sn2GatewayIP'), '\n next\nedit 4\nset dst 168.63.129.16 255.255.255.255\nset device port1\n set gateway ', variables ('sn1GatewayIP'), '\n next\n end\n config system interface\n edit port1\n set mode static\n set ip ', variables('sn1IPfg2'), '/', variables('sn1CIDRmask'), '\n set description external\n next\n edit port2\n set mode static\n set ip ', variables('sn2IPfg2'), '/', variables('sn2CIDRmask'), '\n set description internal\n set allowaccess ping ssh\n next\n end'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('FortiGateImageSKU')]",
            "version": "[parameters('FortiGateImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('network_NIC_fg21_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg22_Id')]"
            }
          ]
        }
      }
    }
  ]
  }
