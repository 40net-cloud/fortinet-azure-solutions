{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine"
      }
    },
    "fortiGateNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Name for FortiGate virtual appliances (A & B will be appended to the end of each respectively)"
      }
    },
    "fortiGateImageSKU": {
      "type": "string",
      "defaultValue": "fortinet_fg-vm",
      "allowedValues": [
        "fortinet_fg-vm",
        "fortinet_fg-vm_payg_2022"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately)"
      }
    },
    "fortiGateImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "6.2.0",
        "6.2.2",
        "6.2.4",
        "6.2.5",
        "6.4.0",
        "6.4.2",
        "6.4.3",
        "6.4.5",
        "6.4.6",
        "6.4.7",
        "6.4.8",
        "7.0.0",
        "7.0.1",
        "7.0.2",
        "7.0.3",
        "latest"
      ],
      "metadata": {
        "description": "Only 6.0.0 has the A/P HA feature currently"
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_F2s",
      "allowedValues": [ "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_F2", "Standard_F4", "Standard_F8", "Standard_F4s_v2", "Standard_F8s_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS4_v3", "Standard_DS8_v3" ],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }
    },
    "publicIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Choose between an existing or new public IP for the External Azure Load Balancer"
      }
    },
    "publicIPName": {
      "type": "string",
      "defaultValue": "FGTAPClusterPublicIP",
      "metadata": {
        "description": "Name of Public IP address element"
      }
    },
    "publicIPResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs"
      }
    },
    "publicIPAddressType": {
      "type": "string",
      "defaultValue": "Static",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Type of public IP address"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network (with new vnet the current resourcegroup is used)"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "ExternalSubnet",
      "metadata": {
        "description": "External Subnet"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/26",
      "metadata": {
        "description": "External Subnet Prefix"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "InternalSubnet",
      "metadata": {
        "description": "Internal Subnet"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.64/26",
      "metadata": {
        "description": "Internal Subnet Prefix"
      }
    },
    "subnet3Name": {
      "type": "string",
      "defaultValue": "ProtectedASubnet",
      "metadata": {
        "description": "Protected A Subnet 5 Name"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "172.16.137.0/24",
      "metadata": {
        "description": "Protected A Subnet 3 Prefix"
      }
    },
    "subnet4Name": {
      "type": "string",
      "defaultValue": "ProtectedBSubnet",
      "metadata": {
        "description": "Protected B Subnet 4 Name"
      }
    },
    "subnet4Prefix": {
      "type": "string",
      "defaultValue": "172.16.138.0/24",
      "metadata": {
        "description": "Protected B Subnet 4 Prefix"
      }
    },
    "vnetNewOrExistingSpoke1": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetNameSpoke1": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network for Spoke1"
      }
    },
    "vnetResourceGroupSpoke1": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network Spoke 1 (with new vnet the current resourcegroup is used)"
      }
    },
    "subnet1Spoke1Name": {
      "type": "string",
      "defaultValue": "SPOKE1Subnet",
      "metadata": {
        "description": "Subnet 1 Spoke 1"
      }
    },
    "subnet1Spoke1Prefix": {
      "type": "string",
      "defaultValue": "172.16.140.0/26",
      "metadata": {
        "description": "Subnet 1 Spoke 1"
      }
    },
    "vnetAddressPrefixSpoke1": {
      "type": "string",
      "defaultValue": "172.16.140.0/24",
      "metadata": {
        "description": "Virtual Network Address prefix for Spoke 1"
      }
    },
    "vnetNewOrExistingSpoke2": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetNameSpoke2": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network for Spoke1"
      }
    },
    "vnetResourceGroupSpoke2": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network Spoke 1 (with new vnet the current resourcegroup is used)"
      }
    },
    "vnetAddressPrefixSpoke2": {
      "type": "string",
      "defaultValue": "172.16.142.0/24",
      "metadata": {
        "description": "Virtual Network Address prefix for Spoke 2"
      }
    },
    "subnet1Spoke2Name": {
      "type": "string",
      "defaultValue": "SPOKE2Subnet",
      "metadata": {
        "description": "Subnet 1 Spoke 2"
      }
    },
    "subnet1Spoke2Prefix": {
      "type": "string",
      "defaultValue": "172.16.142.0/26",
      "metadata": {
        "description": "Subnet 1 Spoke 2"
      }
    },
    "FortinetTags": {
    "type": "object",
    "defaultValue": {
      "provider": "6EB3B02F-50E5-4A3E-8CB8-2E129258317D"
      }
    }
  },
  "variables": {
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-11-01",
    "resourceApiVersion": "2018-05-01",

    "acceleratedNetworking": "[if(or(equals(parameters('fortiGateImageVersion'),'6.0.6'),equals(parameters('fortiGateImageVersion'),'6.2.1'),equals(parameters('fortiGateImageVersion'),'6.2.2'),equals(parameters('fortiGateImageVersion'),'latest')),'true','false')]",

    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('fortiGateNamePrefix'),'-VNET'),parameters('vnetName'))]",
    "vnetID": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks', variables('vnetName')))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet1Name'))]",
    "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet2Name'))]",
    "vnetNameSpoke1": "[if(equals(parameters('vnetNameSpoke1'),''),concat(parameters('fortiGateNamePrefix'),'-VNET-SPOKE1'),parameters('vnetName'))]",
    "vnetIDSpoke1": "[if(equals(parameters('vnetNewOrExistingSpoke1'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetNameSpoke1')),resourceId(parameters('vnetResourceGroupSpoke1'),'Microsoft.Network/virtualNetworks', variables('vnetNameSpoke1')))]",
    "vnetNameSpoke2": "[if(equals(parameters('vnetNameSpoke2'),''),concat(parameters('fortiGateNamePrefix'),'-VNET-SPOKE2'),parameters('vnetName'))]",
    "vnetIDSpoke2": "[if(equals(parameters('vnetNewOrExistingSpoke2'),'new'),resourceId('Microsoft.Network/virtualNetworks', variables('vnetNameSpoke2')),resourceId(parameters('vnetResourceGroupSpoke2'),'Microsoft.Network/virtualNetworks', variables('vnetNameSpoke2')))]",

    "fg1VmName": "[concat(parameters('fortiGateNamePrefix'),'-FGT-A')]",

    "routeTableProtectedAName": "[concat(parameters('fortiGateNamePrefix'),'-RT-PROTECTED-A')]",
    "routeTableProtectedAId": "[resourceId('Microsoft.Network/routeTables',variables('routeTableProtectedAName'))]",
    "routeTableProtectedBName": "[concat(parameters('fortiGateNamePrefix'),'-RT-PROTECTED-B')]",
    "routeTableProtectedBId": "[resourceId('Microsoft.Network/routeTables',variables('routeTableProtectedBName'))]",
    "routeTableSpoke1Name": "[concat(parameters('fortiGateNamePrefix'),'-RT-SPOKE-1')]",
    "routeTableSpoke1Id": "[resourceId('Microsoft.Network/routeTables',variables('routeTableSpoke1Name'))]",
    "routeTableSpoke2Name": "[concat(parameters('fortiGateNamePrefix'),'-RT-SPOKE-2')]",
    "routeTableSpoke2Id": "[resourceId('Microsoft.Network/routeTables',variables('routeTableSpoke2Name'))]",

    "hubtoSpoke1PeeringName": "[concat(variables('vnetName'), 'To', variables('vnetNameSpoke1'))]",
    "spoke1toHubPeeringName": "[concat(variables('vnetNameSpoke1'), 'To', variables('vNetName'))]",
    "hubtoSpoke2PeeringName": "[concat(variables('vnetName'), 'To', variables('vnetNameSpoke2'))]",
    "spoke2toHubPeeringName": "[concat(variables('vnetNameSpoke2'), 'To', variables('vnetName'))]",

    "network_NIC_fg11_Name": "[concat(variables('fg1VmName'),'-Nic1')]",
    "network_NIC_fg11_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg11_Name'))]",
    "network_NIC_fg12_Name": "[concat(variables('fg1VmName'),'-Nic2')]",
    "network_NIC_fg12_Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('network_NIC_fg12_Name'))]",

    "publicIPName": "[if(equals(parameters('publicIPName'),''),concat(parameters('fortiGateNamePrefix'),'-FGT-PIP'),parameters('publicIPName'))]",
    "publicIPID": "[if(equals(parameters('publicIPNewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName')),resourceId(parameters('publicIPResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIPName')))]",

    "NSGName": "[concat(parameters('fortiGateNamePrefix'),'-',uniqueString(resourceGroup().id),'-NSG')]",

    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
    "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
    "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
    "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
    "sn1IPfg1": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),5))]",

    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
    "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
    "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
    "sn2IPArray3": "[string(add(int(variables('sn2IPArray2nd')[0]),1))]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2GatewayIP": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPArray3'))]",
    "sn2IPfg1": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),5))]",

    "customDataFG1": "[base64(concat('config system sdn-connector\nedit AzureSDN\nset type azure\nend\nend\nconfig router static\nedit 1\nset gateway ', variables('sn1GatewayIP'), '\nset device port1\nnext\nedit 2\nset dst ', parameters('vnetAddressPrefix'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nnext\nedit 3\nset dst ', parameters('vnetAddressPrefixSpoke1'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nset comment Spoke1-Subnet\nnext\nedit 4\nset dst ', parameters('vnetAddressPrefixSpoke2'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nset comment Spoke2-Subnet\nnex\nedit \nset dst ', parameters('vnetAddressPrefixSpoke2'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nset comment Spoke2-Subnet\nnext\nend\nconfig system interface\nedit port1\nset mode static\nset ip ',  variables('sn1IPfg1'), '/', variables('sn1CIDRmask'), '\nset description external\nset allowaccess ping https ssh ftm\nnext\nedit port2\nset mode static\nset ip ', variables('sn2IPfg1'), '/', variables('sn2CIDRmask'), '\nset description internal\nset allowaccess probe-response\nnext\nend\nconfig firewall address\nedit Spoke1-subnet\nset associated-interface port2\nset subnet ', parameters('subnet1Spoke1Prefix'), '\nnext\nedit Spoke2-subnet\nset associated-interface port2\nset subnet ', parameters('subnet1Spoke2Prefix'), '\nnext\nedit ProtectedASubnet\nset associated-interface port2\nset subnet ', parameters('subnet3Prefix'), '\nnext\nedit ProtectedBSubnet\nset associated-interface port2\nset subnet ', parameters('subnet4Prefix'), '\nnext\nend\nconfig firewall policy\nedit 1\nset name Spoke1subnet-to-Spoke2subnet\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke1-subnet\nset dstaddr Spoke2-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 2\nset name Spoke2subnet-to-Spoke1subnet\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke2-subnet\nset dstaddr Spoke1-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 3\nset name SpokesSubnets-to-ProtectedSubnets\nset srcintf port2\nset dstintf port2\nset srcaddr Spoke1-subnet Spoke2-subnet\nset dstaddr ProtectedASubnet ProtectedBSubnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 4\nset name ProtectedSubnets-to-SpokeSubnets\nset srcintf port2\nset dstintf port2\nset srcaddr ProtectedASubnet ProtectedBSubnet\nset dstaddr Spoke1-subnet Spoke2-subnet\nset action accept\nset schedule always\nset service ALL\nset fsso disable\nnext\nedit 5\nset name Protected&SpokeSubnets-to-Internet\nset srcintf port2\nset dstintf port1\nset srcaddr ProtectedASubnet ProtectedBSubnet Spoke1-subnet Spoke2-subnet\nset dstaddr all\nset action accept\nset schedule always\nset service ALL\nset utm-status enable\nset fsso disable\nset av-profile default\nset webfilter-profile default\nset dnsfilter-profile default\nset ips-sensor default\nset application-list default\nset ssl-ssh-profile certificate-inspection\nset nat enable\nnext\nend\n'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('resourceApiVersion')]",
      "name": "pid-2dc4b447-552f-557f-b1cc-2faec6f9f133",
      "type": "Microsoft.Resources/deployments",
      "properties":{
       "mode": "Incremental",
       "template": {
         "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
         "contentVersion": "1.0.0.0",
         "resources": []
       }
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableProtectedAName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableProtectedBName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefix')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet4Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableSpoke1Name')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefixSpoke1')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke1Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('routeTableSpoke2Name')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "routes": [
          {
            "name": "VirtualNetwork",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefixSpoke2')]",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          },
          {
            "name": "Subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke2Prefix')]",
              "nextHopType": "VnetLocal"
            }
          },
          {
            "name": "Default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIPAddress": "[variables('sn2IPfg1')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('routeTableProtectedAId')]",
        "[variables('routeTableProtectedBId')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableProtectedAId')]"
              }
            }
          },
          {
            "name": "[parameters('subnet4Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet4Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableProtectedBId')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2016-06-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('hubtoSpoke1PeeringName')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNameSpoke1'))]"
          ],
          "comments": "Hub to Spoke 1",
          "properties": {
              "allowVirtualNetworkAccess": "true",
              "allowForwardedTraffic": "true",
              "allowGatewayTransit": "false",
              "useRemoteGateways": "false",
              "remoteVirtualNetwork": {
                  "id": "[variables('vnetIDSpoke1')]"
              }
          }
        },
        {
          "apiVersion": "[variables('networkApiVersion')]",
          "type": "virtualNetworkPeerings",
          "name": "[variables('hubtoSpoke2PeeringName')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNameSpoke2'))]"
          ],
          "comments": "HUB to Spoke 2",
          "properties": {
              "allowVirtualNetworkAccess": "true",
              "allowForwardedTraffic": "true",
              "allowGatewayTransit": "false",
              "useRemoteGateways": "false",
              "remoteVirtualNetwork": {
                  "id": "[variables('vnetIDSpoke2')]"
              }
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('vnetNewOrExistingSpoke1'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('vnetNameSpoke1')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('routeTableSpoke1Id')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefixSpoke1')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Spoke1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke1Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableSpoke1Id')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "[variables('networkApiVersion')]",
          "type": "virtualNetworkPeerings",
          "name": "[variables('spoke1toHubPeeringName')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNameSpoke1'))]"
          ],
          "comments": "Spoke 1 to Hub",
          "properties": {
              "allowVirtualNetworkAccess": "true",
              "allowForwardedTraffic": "true",
              "allowGatewayTransit": "false",
              "useRemoteGateways": "false",
              "remoteVirtualNetwork": {
                  "id": "[variables('vnetID')]"
              }
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('vnetNewOrExistingSpoke2'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('networkApiVersion')]",
      "name": "[variables('vnetNameSpoke2')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('routeTableSpoke2Id')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefixSpoke2')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Spoke2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Spoke2Prefix')]",
              "routeTable": {
                "id": "[variables('routeTableSpoke2Id')]"
              }
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "[variables('networkApiVersion')]",
          "type": "virtualNetworkPeerings",
          "name": "[variables('spoke2toHubPeeringName')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNameSpoke2'))]"
          ],
          "comments": "Spoke 2 to Hub",
          "properties": {
              "allowVirtualNetworkAccess": "true",
              "allowForwardedTraffic": "true",
              "allowGatewayTransit": "false",
              "useRemoteGateways": "false",
              "remoteVirtualNetwork": {
                  "id": "[variables('vnetID')]"
              }
          }
        }
      ]
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('NSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAllInbound",
            "properties": {
              "description": "Allow all in",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('publicIPNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "name": "[variables('publicIPName')]",
      "location": "[resourceGroup().location]",
      "sku":
      {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPAddressType')]"
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg11_Name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('NSGName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfg1')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": {
                "id": "[variables('publicIPID')]"
              },
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('network_NIC_fg12_Name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('sn2IPfg1')]",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fg1VmName')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "tags": {
       "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[resourceGroup().location]",
      "plan": {
        "name": "[parameters('fortiGateImageSKU')]",
        "publisher": "fortinet",
        "product": "fortinet_fortigate-vm_v5"
      },
      "dependsOn": [
        "[variables('network_NIC_fg11_Name')]",
        "[variables('network_NIC_fg12_Name')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "osProfile": {
          "computerName": "[variables('fg1VmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('customDataFG1')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "fortinet",
            "offer": "fortinet_fortigate-vm_v5",
            "sku": "[parameters('fortiGateImageSKU')]",
            "version": "[parameters('fortiGateImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('network_NIC_fg11_Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('network_NIC_fg12_Id')]"
            }
          ]
        }
      }
    }
  ]
  }
