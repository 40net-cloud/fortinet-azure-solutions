{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the FortiGate VM"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the FortiGate VM"
      }
    },
    "fortiGateCount": {
      "type": "int",
      "metadata": {
        "description": "Number of FortiGate VM instances to deploy"
      },
      "defaultValue": 2
    },
    "fortiGateNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Naming prefix for all deployed resources. The FortiGate VMs will have the suffix '-fgt-a' and '-fgt-b'. For example if the prefix is 'acme-01' the FortiGates will be named 'acme-01-fgt-a' and 'acme-01-fgt-b'"
      }
    },
    "fortiGateImageSKU_x64": {
      "type": "string",
      "defaultValue": "fortinet_fg-vm",
      "allowedValues": [
        "fortinet_fg-vm",
        "fortinet_fg-vm_payg_2023"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately)"
      }
    },
    "fortiGateImageSKU_arm64": {
      "type": "string",
      "defaultValue": "fortinet_fg-vm_arm64",
      "allowedValues": [
        "fortinet_fg-vm_arm64",
        "fortinet_fg-vm_payg_2023_arm64"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately"
      }
    },
    "fortiGateInstanceArchitecture": {
      "type": "string",
      "defaultValue": "x64",
      "allowedValues": [
        "x64",
        "arm64"
      ],
      "metadata": {
        "description": "Indicates the instance Architecture of the VM deployment. Intel/AMD or ARM"
      }
    },
    "fortiGateImageVersion_x64": {
      "type": "string",
      "defaultValue": "7.4.5",
      "allowedValues": [
        "latest",
        "7.6.1",
        "7.6.0",
        "7.4.5",
        "7.4.4",
        "7.4.3",
        "7.4.2",
        "7.4.1",
        "7.4.0",
        "7.2.10",
        "7.2.9",
        "7.2.8",
        "7.2.7",
        "7.2.6",
        "7.2.5",
        "7.2.4",
        "7.2.3",
        "7.2.2",
        "7.2.1",
        "7.2.0",
        "7.0.15",
        "7.0.14",
        "7.0.13",
        "7.0.12",
        "7.0.11",
        "7.0.10",
        "7.0.9",
        "7.0.8",
        "7.0.6",
        "7.0.5",
        "7.0.4",
        "7.0.3",
        "7.0.2",
        "7.0.1",
        "7.0.0",
        "6.4.15",
        "6.4.13",
        "6.4.12",
        "6.4.11",
        "6.4.10",
        "6.4.9",
        "6.4.8",
        "6.4.7",
        "6.4.6",
        "6.4.5",
        "6.4.3",
        "6.4.2",
        "6.4.0",
        "6.2.5",
        "6.2.4",
        "6.2.2",
        "6.2.0"
      ],
      "metadata": {
        "description": "Select the image version"
      }
    },
    "fortiGateImageVersion_arm64": {
      "type": "string",
      "defaultValue": "7.4.5",
      "allowedValues": [
        "latest",
        "7.6.1",
        "7.6.0",
        "7.4.5",
        "7.4.4",
        "7.4.3",
        "7.2.10",
        "7.2.9",
        "7.2.8"
      ],
      "metadata": {
        "description": "Select the image version"
      }
    },
    "fortiGateAdditionalCustomData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The ARM template provides a basic configuration. Additional configuration can be added here."
      }
    },
    "instanceType_x64": {
      "type": "string",
      "defaultValue": "Standard_F4s",
      "allowedValues": [
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D8_v4",
        "Standard_D16_v4",
        "Standard_D32_v4",
        "Standard_D8s_v4",
        "Standard_D16s_v4",
        "Standard_D32s_v4",
        "Standard_D8a_v4",
        "Standard_D16a_v4",
        "Standard_D32a_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D8_v5",
        "Standard_D16_v5",
        "Standard_D32_v5",
        "Standard_D2s_v5",
        "Standard_D4s_v5",
        "Standard_D8s_v5",
        "Standard_D16s_v5",
        "Standard_D32s_v5",
        "Standard_D8as_v5",
        "Standard_D16as_v5",
        "Standard_D32as_v5",
        "Standard_D2ads_v5",
        "Standard_D4ads_v5",
        "Standard_D8ads_v5",
        "Standard_D16ads_v5",
        "Standard_D32ads_v5"
      ],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }
    },
    "instanceType_arm64": {
      "type": "string",
      "defaultValue": "Standard_D8ps_v5",
      "allowedValues": [
        "Standard_D8ps_v5",
        "Standard_D16ps_v5",
        "Standard_D32ps_v5",
        "Standard_D8pds_v5",
        "Standard_D16pds_v5",
        "Standard_D32pds_v5",
        "Standard_D8pls_v5",
        "Standard_D16pls_v5",
        "Standard_D32pls_v5",
        "Standard_D8plds_v5",
        "Standard_D16plds_v5",
        "Standard_D32plds_v5",
        "Standard_E8ps_v5",
        "Standard_E16ps_v5",
        "Standard_E32ps_v5",
        "Standard_E8pds_v5",
        "Standard_E16pds_v5",
        "Standard_E32pds_v5"
      ],
      "metadata": {
        "description": "Virtual Machine size selection"
      }
    },
    "acceleratedNetworking": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": [
        "false",
        "true"
      ],
      "metadata": {
        "description": "Accelerated Networking enables direct connection between the VM and network card. Only available on 2 CPU F/Fs and 4 CPU D/Dsv2, D/Dsv3, E/Esv3, Fsv2, Lsv2, Ms/Mms and Ms/Mmsv2"
      }
    },
    "acceleratedConnections": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Accelerated connections provides an enhanced bandwidth at an additional cost"
      }
    },
    "acceleratedConnectionsSku": {
      "type": "string",
      "defaultValue": "A1",
      "allowedValues": [
        "A1",
        "A2",
        "A4",
        "A8"
      ],
      "metadata": {
        "description": "Accelerated Connections Auxiliary SKU bandwidth Tiers"
      }
    },
    "internalLoadBalancer": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy a new internal load balancer."
      }
    },
    "internalLoadBalancerBackendPoolId": {
      "type": "string",
      "metadata": {
        "description": "Reference an existing internal load balancer backend pool."
      }
    },

    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network, required if utilizing and existing VNET. If no name is provided the default name will be the Resource Group Name as the Prefix and '-vnet' as the suffix"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network, leave blank if a new VNET is being utilized"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "externalsubnet",
      "metadata": {
        "description": "Subnet 1 Name"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/26",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "internalsubnet",
      "metadata": {
        "description": "Subnet 2 Name"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.64/26",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet2StartAddress": {
      "type": "string",
      "defaultValue": "172.16.136.68",
      "metadata": {
        "description": "Subnet 2 start address, 2 or more consecutive private IPs are required"
      }
    },
    "subnet3Name": {
      "type": "string",
      "defaultValue": "managementsubnet",
      "metadata": {
        "description": "Subnet 3 Name"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.128/26",
      "metadata": {
        "description": "Subnet 3 Prefix"
      }
    },
    "serialConsole": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Enable Serial Console"
      }
    },
    "fortiManager": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Connect to FortiManager"
      }
    },
    "fortiManagerIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager IP or DNS name to connect to on port TCP/541"
      }
    },
    "fortiManagerSerial": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager serial number to add the deployed FortiGate into the FortiManager"
      }
    },
    "customImageReference": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "By default, the deployment will use Azure Marketplace images. In specific cases, using BYOL custom FortiGate images can be deployed. This requires a reference "
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {}
    },
    "fortinetTags": {
      "type": "object",
      "defaultValue": {
        "publisher": "Fortinet",
        "template": "Active-Active-ELB-ILB",
        "provider": "6EB3B02F-50E5-4A3E-8CB8-2E12925831AA"
      }
    }
  },
  "variables": {
    "imagePublisher": "fortinet",
    "imageOffer": "fortinet_fortigate-vm_v5",
    "fortiGateImageSku": "[if(equals(parameters('fortiGateInstanceArchitecture'), 'arm64'), parameters('fortiGateImageSKU_arm64'), parameters('fortiGateImageSKU_x64'))]",
    "instanceType": "[if(equals(parameters('fortiGateInstanceArchitecture'), 'arm64'), parameters('instanceType_arm64'), parameters('instanceType_x64'))]",
    "fortiGateImageVersion": "[if(equals(parameters('fortiGateInstanceArchitecture'), 'arm64'), parameters('fortiGateImageVersion_arm64'), parameters('fortiGateImageVersion_x64'))]",
    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('fortiGateNamePrefix'),'-vnet'),parameters('vnetName'))]",
    "subnet1Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')))]",
    "subnet2Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')))]",
    "subnet3Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet3Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet3Name')))]",
    "fgtVmName": "[concat(parameters('fortiGateNamePrefix'),'-fgt')]",
    "customDataFMG": "[if(equals(parameters('fortiManager'),'yes'),concat('\nconfig system central-management\nset type fortimanager\nset fmg ',parameters('fortiManagerIP'),'\nset serial-number ', parameters('fortiManagerSerial'), '\nend\nconfig system interface\nedit port1\nappend allowaccess fgfm\nend\nconfig system interface\nedit port2\nappend allowaccess fgfm\nend\n'),'')]",
    "customDataNetworking": "[concat('config system interface\nedit port1\nset mode dhcp\nset description external\nset allowaccess ping probe-response\nnext\nedit port2\nset mode dhcp\nset allowaccess ping probe-response\nset description internal\nnext\nedit port3\nset mode dhcp\nset allowaccess ping ssh https probe-response\nset description management\nnext\nend\nconfig router static\nedit 1\nset dst ', parameters('vnetAddressPrefix'), '\nset gateway ', variables('sn2GatewayIP'), '\nset device port2\nnext\nedit 2\nset dst 168.63.129.16 255.255.255.255\nset device port2\nset gateway ', variables('sn2GatewayIP'), '\nnext\nedit 3\nset gateway ', variables('sn3GatewayIP'),'\nset distance 5\nset device port3\nnext\nend\n')]",
    "customData": "[concat('config system sdn-connector\nedit AzureSDN\nset type azure\nnext\nend\nconfig system probe-response\nset mode http-probe\nend\n', variables('customDataNetworking'), variables('customDataFMG'), parameters('fortiGateAdditionalCustomData'), '\n')]",
    "serialConsoleEnabled": "[if(equals(parameters('serialConsole'),'yes'),'true','false')]",
    "nsgName": "[concat(parameters('fortiGateNamePrefix'),'-nsg')]",
    "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]",
    "sn1GatewayIP": "[variables('sn1CidrObject').firstUsable]",
    "sn1CidrObject": "[parseCidr(parameters('subnet1Prefix'))]",
    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2GatewayIP": "[variables('sn2CidrObject').firstUsable]",
    "sn2CidrObject": "[parseCidr(parameters('subnet2Prefix'))]",
    "sn2IPStartAddress": "[split(parameters('subnet2StartAddress'),'.')]",
    "sn2IPlb": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',int(variables('sn2IPStartAddress')[3]))]",
    "sn3GatewayIP": "[variables('sn3CidrObject').firstUsable]",
    "sn3CidrObject": "[parseCidr(parameters('subnet3Prefix'))]",
    "internalLBName": "[concat(parameters('fortiGateNamePrefix'),'-internalloadbalancer')]",
    "internalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('internalLBName'))]",
    "internalLBFEName": "[concat(parameters('fortiGateNamePrefix'),'-ilb-',parameters('subnet2Name'),'-frontend')]",
    "internalLBFEId": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('internalLBName'),variables('internalLBFEName'))]",
    "internalLBBEName": "[concat(parameters('fortiGateNamePrefix'),'-ilb-',parameters('subnet2Name'),'-backend')]",
    "internalLBBEId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('internalLBName'),variables('internalLBBEName'))]",
    "internalLBProbeName": "lbprobe",
    "internalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes',variables('internalLBName'),variables('internalLBProbeName'))]",
    "internalLBBackendAddressPools": [
      {
        "id": "[if(parameters('internalLoadBalancer'),variables('internalLBBEId'),parameters('internalLoadBalancerBackendPoolId'))]"
      }
    ],
    "pipZones": "[pickZones('Microsoft.Network', 'publicIPAddresses', parameters('location'), 3)]",
    "imageReferenceMarketplace": {
      "publisher": "[variables('imagePublisher')]",
      "offer": "[variables('imageOffer')]",
      "sku": "[variables('fortiGateImageSku')]",
      "version": "[variables('FortiGateImageVersion')]"
    },
    "imageReferenceCustomImage": {
      "id": "[parameters('customImageReference')]"
    },
    "virtualMachinePlan": {
      "name": "[variables('fortiGateImageSku')]",
      "publisher": "[variables('imagePublisher')]",
      "product": "[variables('imageOffer')]"
    },
    "fastpathtag": {
      "fastpathenabled": "[if(and(equals(parameters('acceleratedNetworking'),'true'),parameters('acceleratedConnections')),'true','false')]"
    },
    "auxiliaryMode": "[if(and(equals(parameters('acceleratedNetworking'),'true'),parameters('acceleratedConnections')),'AcceleratedConnections','None')]",
    "auxiliarySku": "[if(and(equals(parameters('acceleratedNetworking'),'true'),parameters('acceleratedConnections')),parameters('acceleratedConnectionsSku'),'None')]"
  },
  "resources": [
    {
      "name": "[concat(parameters('fortiGateNamePrefix'), '-fortinetdeployment-', uniquestring(resourceGroup().id))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2023-07-01",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "name": "[variables('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/virtualNetworks']), parameters('fortinetTags')) ]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups']), parameters('fortinetTags')) ]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAllInbound",
            "properties": {
              "description": "Allow all in",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('fgtVmName') ,'-pip-',format('{0:D2}', copyIndex(1)))]",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/publicIPAddresses']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiGateCount')]"
      },
      "zones": "[variables('pipZones')]",
      "properties": {
        "publicIPAllocationMethod": "static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(variables('fgtVmName')), '-pip-',format('{0:D2}', copyIndex(1)),'-',uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "condition": "[parameters('internalLoadBalancer')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('internalLBName')]",
      "apiVersion": "2023-06-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/loadBalancers']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('internalLBFEName')]",
            "properties": {
              "privateIPAddress": "[variables('sn2IPlb')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            },
            "zones": "[variables('pipZones')]"
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('internalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('internalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('internalLBBEId')]"
              },
              "probe": {
                "id": "[variables('internalLBProbeId')]"
              },
              "protocol": "all",
              "frontendPort": 0,
              "backendPort": 0,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "lbruleFEall"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8008,
              "intervalInSeconds": 5,
              "probeThreshold": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)),'-nic-1')]",
      "apiVersion": "2023-06-01",
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiGateCount')]"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkInterfaces'],variables('fastpathtag')), union(parameters('fortinetTags'),variables('fastpathtag'))) ]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "auxiliaryMode": "[variables('auxiliaryMode')]",
        "auxiliarySku": "[variables('auxiliarySku')]",
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)),'-nic-2')]",
      "apiVersion": "2023-06-01",
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiGateCount')]"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkInterfaces'],variables('fastpathtag')), union(parameters('fortinetTags'),variables('fastpathtag'))) ]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('internalLBId')]",
        "[variables('vnetName')]",
        "[variables('nsgId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              },
              "loadBalancerBackendAddressPools": "[if(or(parameters('internalLoadBalancer'),greater(length(parameters('internalLoadBalancerBackendPoolId')),0)),variables('internalLBBackendAddressPools'),json('null'))]"
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "auxiliaryMode": "[variables('auxiliaryMode')]",
        "auxiliarySku": "[variables('auxiliarySku')]",
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)),'-nic-3')]",
      "apiVersion": "2023-06-01",
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiGateCount')]"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkInterfaces'],variables('fastpathtag')), union(parameters('fortinetTags'),variables('fastpathtag'))) ]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('nsgId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('fortiGateNamePrefix'),'-fgt-pip-',format('{0:D2}', copyIndex(1))))]"
              },
              "subnet": {
                "id": "[variables('subnet3Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "auxiliaryMode": "[variables('auxiliaryMode')]",
        "auxiliarySku": "[variables('auxiliarySku')]",
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)))]",
      "apiVersion": "2023-03-01",
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiGateCount')]"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Compute/virtualMachines']), parameters('fortinetTags')) ]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)),'-nic-1')]",
        "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)),'-nic-2')]",
        "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)),'-nic-3')]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "zones": "[array(add(1, mod(copyIndex(), length(variables('pipZones')))))]",
      "plan": "[if(and(or(equals(variables('fortiGateImageSKU'),'fortinet_fg-vm'),equals(variables('fortiGateImageSKU'),'fortinet_fg-vm_arm64')),not(equals(parameters('customImageReference'),''))), json('null'), variables('virtualMachinePlan'))]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('instanceType')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[base64(variables('customData'))]"
        },
        "storageProfile": {
          "imageReference": "[if(and(equals(variables('fortiGateImageSku'),'fortinet_fg-vm'),not(equals(parameters('customImageReference'),''))), variables('imageReferenceCustomImage'), variables('imageReferenceMarketplace'))]",
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "copy": [
            {
              "name": "networkInterfaces",
              "count": 3,
              "input": {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('fgtVmName'),'-',format('{0:D2}', copyIndex(1)),'-nic-',copyIndex('networkInterfaces',1)))]",
                "properties": {
                  "primary": "[if(equals(copyIndex('networkInterfaces',1),1), 'true', 'false')]"
                }
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('serialConsoleEnabled')]"
          }
        }
      }
    }
  ],
  "outputs": {}
}
