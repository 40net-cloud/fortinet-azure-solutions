name: "[FGT] Azure Marketplace release"

on:
  push:
    tags:
      - "FGT-*"

  workflow_dispatch:

env:
  PUBLISHER: fortinet
  PRODUCT: FortiGate
  PRODUCTL: fortigate
  PRODUCTSHORT: FGT
  PRODUCTOFFER: fortinet_fortigate-vm_v5
  PRODUCTSKU_X64: fortinet_fg-vm
  PRODUCTSKU_ARM64: fortinet_fg-vm_arm64

jobs:
  build:
    name: Getting all data ready for publishing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login via Az module
        uses: azure/login@v2
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true

      - name: Package and convert templates
        uses: azure/powershell@v2
        with:
          inlineScript: |
            function Get-LatestVersions {
              param (
                [string[]]$Versions
              )
              $parsedVersions = $Versions | ForEach-Object {
                $versionParts = $_ -split '\.'
                [pscustomobject]@{
                  Major = [int]$versionParts[0]
                  Minor = [int]$versionParts[1]
                  Patch = [int]$versionParts[2]
                  FullVersion = $_
                }
              }
              $filteredByMajor = $parsedVersions | Where-Object { ($_.Major -ge 6 -and $_.Minor -ge 4) -or ($_.Major -ge 7 )}
              $filteredVersions = $filteredByMajor |
                Group-Object -Property Major, Minor |
                ForEach-Object {
                  $_.Group | Sort-Object -Property Patch -Descending | Select-Object -First 2
              }
              $sortedVersions = $filteredVersions | Sort-Object -Property Major, Minor, Patch -Descending
              $sortedVersions.FullVersion
            }
            $buildingBlocks = @("A-Single-VM", "Active-Active-ELB-ILB","Active-Passive-ELB-ILB","Active-Passive-SDN")
            $marketplaceVersions_x64 = @()
            $marketplaceVersionsUI_x64 = @()

            $marketplaceVersions_x64 = @("latest") + $(Get-LatestVersions $(Get-AzVMImage -PublisherName "${env:PUBLISHER}" -Location eastus -Offer "${env:PRODUCTOFFER}" -sku "${env:PRODUCTSKU_X64}").Version)
            $marketplaceVersions_x64 | ForEach-Object { $marketplaceVersionsUI_x64 += [pscustomobject]@{label=$_;value=$_} }

            $versions_arm64 = Get-AzVMImage -PublisherName "${env:PUBLISHER}" -Location eastus -Offer "${env:PRODUCTOFFER}" -sku "${env:PRODUCTSKU_X64}"
            $marketplaceVersions_arm64 += $($versions_arm64 | Where-Object {$_.Version.StartsWith("7.0")} | Sort-Object -Unique { $_.Version -as [version]} | Select-Object -Last 2).Version
            $marketplaceVersions_arm64 += $($versions_arm64 | Where-Object {$_.Version.StartsWith("7.2")} | Sort-Object -Unique { $_.Version -as [version]} | Select-Object -Last 2).Version
            $marketplaceVersions_arm64 += $($versions_arm64 | Where-Object {$_.Version.StartsWith("7.4")} | Sort-Object -Unique { $_.Version -as [version]} | Select-Object -Last 2).Version
            $marketplaceVersions_arm64 += "latest"
            [array]::Reverse($marketplaceVersions_arm64)
            $marketplaceVersions_x64 | ForEach-Object { $marketplaceVersionsUI_arm64 += [pscustomobject]@{label=$_;value=$_} }

            foreach ($buildingBlock in $buildingBlocks) {
              $dest = "./releases/${buildingBlock}/"
              [void](New-Item -Path "${dest}" -Type Directory)

              $content = Get-Content -Raw -Path "./FortiGate/${buildingBlock}/azuredeploy.json" | ConvertFrom-Json
              $content.parameters.fortiGateImageVersion.allowedValues = $marketplaceVersions_x64
              $content.resources.Where({$_.type -eq 'Microsoft.Resources/deployments'})[0].name = "pid-776b2227-2743-485a-b385-e9dfd42bfe75-partnercenter"
              $content | ConvertTo-Json -depth 100 | Out-File "${dest}/mainTemplate.json"
              "" | Out-File -Append "${dest}/mainTemplate.json"

              $content = Get-Content -Raw -Path "./FortiGate/${buildingBlock}/createUiDefinition.json" | ConvertFrom-Json
              $content.parameters.basics.Where({$_.Name.equals("fortiGateImageVersion")}).constraints.allowedValues = $marketplaceVersionsUI_x64
              $content | ConvertTo-Json -depth 100 | Out-File "${dest}/createUiDefinition.json"
              "" | Out-File -Append "${dest}/createUiDefinition.json"

              Compress-Archive -Path "./releases/${buildingBlock}/*" -DestinationPath "./releases/${env:PRODUCTL}-$($buildingBlock.ToLower())-azure-templates.zip"
            }
          azPSVersion: "latest"

      - name: Upload release zips
        shell: bash
        run: |
          gh release upload ${{github.ref_name}} ./releases/${{env.PRODUCTL}}-*.zip
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
