{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the FortiTester virtual appliance"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the FortiTester virtual appliance"
      }
    },
    "fortiTesterNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Naming prefix for all deployed resources"
      }
    },
    "fortiTesterImageSKU": {
      "type": "string",
      "defaultValue": "fts-vm-byol",
      "allowedValues": [ "fts-vm-byol" ],
      "metadata": {
        "description": "Identifies SKU BYOL license model (where license is purchased separately)"
      }
    },
    "fortiTesterImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [ "3.7.00", "3.8.0", "latest" ],
      "metadata": {
        "description": "FortiTester versions available in the Azure Marketplace. Additional version can be downloaded via https://support.fortinet.com"
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_F4s",
      "allowedValues": [
        "Standard_F1s",
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3"
      ],
      "metadata": {
        "description": "Virtual Machine size selection"
      }
    },
    "acceleratedNetworking": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": [ "false", "true" ],
      "metadata": {
        "description": "Accelerated Networking enables direct connection between the VM and network card. Only available on 2 CPU F/Fs and 4 CPU D/Dsv2, D/Dsv3, E/Esv3, Fsv2, Lsv2, Ms/Mms and Ms/Mmsv2"
      }
    },

    "publicIP1NewOrExistingOrNone": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [ "new", "existing", "none" ],
      "metadata": {
        "description": "Choose between an existing or new public IP for FortiTester Management"
      }
    },
    "publicIP1Name": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of Public IP address element"
      }
    },
    "publicIP1ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs"
      }
    },
    "publicIP1Type": {
      "type": "string",
      "defaultValue": "Static",
      "allowedValues": [ "Dynamic", "Static" ],
      "metadata": {
        "description": "Type of public IP address"
      }
    },
    "publicIP1SKU": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [ "Basic", "Standard" ],
      "metadata": {
        "description": "SKU of public IP address"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [ "new", "existing" ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network (with new vnet the current resourcegroup is used)"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "MGMTSubnet",
      "metadata": {
        "description": "Management Subnet"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/24",
      "metadata": {
        "description": "Management Subnet Prefix"
      }
    },
    "subnet1StartAddress": {
      "type": "string",
      "defaultValue": "172.16.136.4",
      "metadata": {
        "description": "Subnet 1 start address, 1 consecutive private IPs are required"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "Subnet1",
      "metadata": {
        "description": "Subnet 1"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.137.0/24",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet2StartAddress": {
      "type": "string",
      "defaultValue": "172.16.137.4",
      "metadata": {
        "description": "Subnet 2 start address, 8 consecutive private IPs are required"
      }
    },
    "subnet2SecondaryIPCount": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 256,
      "metadata": {
        "description": "Number of secondary IPs needed to perform tests with multiple clients. Maximum 256 in Azure."
      }
    },
    "subnet3Name": {
      "type": "string",
      "defaultValue": "Subnet2",
      "metadata": {
        "description": "Subnet2"
      }
    },
    "subnet3Prefix": {
      "type": "string",
      "defaultValue": "172.16.138.0/24",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet3StartAddress": {
      "type": "string",
      "defaultValue": "172.16.138.4",
      "metadata": {
        "description": "Subnet 2 start address, 8 consecutive private IPs are required"
      }
    },
    "subnet3SecondaryIPCount": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 256,
      "metadata": {
        "description": "Number of secondary IPs needed to perform tests with multiple clients. Maximum 256 in Azure."
      }
    },
    "serialConsole": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [ "yes", "no" ],
      "metadata": {
        "description": "Enable Serial Console"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "fortinetTags": {
      "type": "object",
      "defaultValue": {
        "publisher": "Fortinet",
        "provider": "6EB3B02F-50E5-4A3E-8CB8-2E12925831FTSVM"
      }
    }
  },
  "variables": {
    "imagePublisher": "fortinet",
    "imageOffer": "fortinet-fortitester",

    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('fortiTesterNamePrefix'),'-VNET'),parameters('vnetName'))]",
    "subnet1Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')))]",
    "subnet2Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')))]",
    "subnet3Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet3Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet3Name')))]",

    "ftsVmName": "[concat(parameters('fortiTesterNamePrefix'),'-FTS')]",

    "ftsNic1Name": "[concat(variables('ftsVmName'),'-Nic1')]",
    "ftsNic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('ftsNic1Name'))]",
    "ftsNic2Name": "[concat(variables('ftsVmName'),'-Nic2')]",
    "ftsNic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('ftsNic2Name'))]",
    "ftsNic3Name": "[concat(variables('ftsVmName'),'-Nic3')]",
    "ftsNic3Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('ftsNic3Name'))]",

    "serialConsoleStorageAccountName": "[concat('console', uniquestring(resourceGroup().id))]",
    "serialConsoleStorageAccountType": "Standard_LRS",
    "serialConsoleEnabled": "[if(equals(parameters('serialConsole'),'yes'),'true','false')]",

    "publicIP1Name": "[if(equals(parameters('publicIP1Name'),''),concat(parameters('fortiTesterNamePrefix'),'-FTS-PIP'),parameters('publicIP1Name'))]",
    "publicIP1Id": "[if(equals(parameters('publicIP1NewOrExistingOrNone'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP1Name')),resourceId(parameters('publicIP1ResourceGroup'),'Microsoft.Network/publicIP1Addresses',variables('publicIP1Name')))]",
    "publicIP1AddressId": { "id": "[variables('publicIP1Id')]" },

    "NSGName": "[concat(parameters('fortiTesterNamePrefix'),'-',uniqueString(resourceGroup().id),'-NSG')]",
    "NSGId": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",

    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1IPStartAddress": "[split(parameters('subnet1StartAddress'),'.')]",
    "sn1IPfts": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',int(variables('sn1IPStartAddress')[3]))]",

    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2IPStartAddress": "[split(parameters('subnet2StartAddress'),'.')]",
    "sn2IPStartAddress3": "[int(variables('sn2IPStartAddress')[3])]",
    "sn2PrimaryIP": [
      {
        "name": "ipconfig1",
        "properties": {
          "primary": true,
          "privateIPAllocationMethod": "Static",
          "privateIPAddress": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPStartAddress3'))]",
          "subnet": {
            "id": "[variables('subnet2Id')]"
          }
        }
      }
    ],
    "sn2secondaryIPs": {
      "copy": [
        {
          "count": "[parameters('subnet2SecondaryIPCount')]",
          "input": {
            "name": "[concat('ipconfig', copyIndex('ipconfig', 2))]",
            "properties": {
              "primary": false,
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(variables('sn2IPStartAddress3'),copyIndex('ipconfig', 1)))]",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            }
          },
          "name": "ipconfig"
        }
      ]
    },

    "sn3IPArray": "[split(parameters('subnet3Prefix'),'.')]",
    "sn3IPArray2": "[string(int(variables('sn3IPArray')[2]))]",
    "sn3IPArray1": "[string(int(variables('sn3IPArray')[1]))]",
    "sn3IPArray0": "[string(int(variables('sn3IPArray')[0]))]",
    "sn3IPStartAddress": "[split(parameters('subnet3StartAddress'),'.')]",
    "sn3IPStartAddress3": "[int(variables('sn3IPStartAddress')[3])]",
    "sn3PrimaryIP": [
      {
        "name": "ipconfig1",
        "properties": {
          "primary": true,
          "privateIPAllocationMethod": "Static",
          "privateIPAddress": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',variables('sn3IPStartAddress3'))]",
          "subnet": {
            "id": "[variables('subnet3Id')]"
          }
        }
      }
    ],
    "sn3secondaryIPs": {
      "copy": [
        {
          "count": "[parameters('subnet3SecondaryIPCount')]",
          "input": {
            "name": "[concat('ipconfig', copyIndex('ipconfig', 2))]",
            "properties": {
              "primary": false,
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(variables('sn3IPStartAddress3'),copyIndex('ipconfig', 1)))]",
              "subnet": {
                "id": "[variables('subnet3Id')]"
              }
            }
          },
          "name": "ipconfig"
        }
      ]
    }

  },
  "resources": [
    {
      "apiVersion": "2020-10-01",
      "name": "pid-partnercenter",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[equals(parameters('serialConsole'), 'yes')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('serialConsoleStorageAccountName')]",
      "apiVersion": "2021-02-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[variables('serialConsoleStorageAccountType')]"
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [ "[parameters('vnetAddressPrefix')]" ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet3Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet3Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('FortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('NSGName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowSSHInbound",
            "properties": {
              "description": "Allow SSH In",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowHTTPInbound",
            "properties": {
              "description": "Allow 80 In",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowHTTPSInbound",
            "properties": {
              "description": "Allow 443 In",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('publicIP1NewOrExistingOrNone'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "name": "[variables('publicIP1Name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('publicIP1SKU')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIP1Type')]"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('ftsNic1Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[variables('vnetName')]", "[variables('NSGId')]" ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfts')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": "[if(not(equals(parameters('publicIP1NewOrExistingOrNone'), 'none')), variables('publicIP1AddressId') , json('null'))]",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": false,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('NSGId')]"
        }
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('ftsNic2Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[variables('vnetName')]", "[variables('NSGId')]" ],
      "properties": {
        "ipConfigurations": "[concat(take(variables('sn2PrimaryIP'), 1), take(variables('sn2secondaryIPs').ipconfig, parameters('subnet2SecondaryIPCount')))]",
        "enableIPForwarding": false,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('ftsNic3Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[variables('vnetName')]", "[variables('NSGId')]" ],
      "properties": {
        "ipConfigurations": "[concat(take(variables('sn3PrimaryIP'), 1), take(variables('sn3secondaryIPs').ipconfig, parameters('subnet3SecondaryIPCount')))]",
        "enableIPForwarding": false,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('ftsVmName')]",
      "apiVersion": "2021-07-01",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('location')]",
      "plan": {
        "name": "[parameters('fortiTesterImageSKU')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('ftsNic1Id')]",
        "[variables('ftsNic2Id')]",
        "[variables('ftsNic3Id')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "osProfile": {
          "computerName": "[variables('ftsVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('fortiTesterImageSKU')]",
            "version": "[parameters('fortiTesterImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 40,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('ftsNic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('ftsNic2Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('ftsNic3Id')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('serialConsoleEnabled')]",
            "storageUri": "[if(equals(parameters('serialConsole'), 'yes'), reference(variables('serialConsoleStorageAccountName'), '2021-08-01').primaryEndpoints['blob'], json('null'))]"
          }
        }
      }
    }
  ]
}
