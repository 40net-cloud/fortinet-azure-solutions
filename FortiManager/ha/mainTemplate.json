{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine"
      }
    },
    "namePrefix": {
      "type": "string",
      "metadata": {
        "description": "Name for FortiManager virtual appliances (A & B will be appended to the end of each respectively)"
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "fortinet-fortimanager",
      "allowedValues": [
        "fortinet-fortimanager"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately)"
      }
    },
    "imageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "6.2.0",
        "6.2.1",
        "6.2.2",
        "6.2.3",
        "6.2.5",
        "6.4.0",
        "6.4.1",
        "6.4.10",
        "6.4.11",
        "6.4.12",
        "6.4.13",
        "6.4.14",
        "6.4.2",
        "6.4.5",
        "6.4.6",
        "6.4.7",
        "6.4.8",
        "6.4.9",
        "7.0.0",
        "7.0.1",
        "7.0.10",
        "7.0.11",
        "7.0.2",
        "7.0.3",
        "7.0.4",
        "7.0.5",
        "7.0.6",
        "7.0.7",
        "7.0.9",
        "7.2.0",
        "7.2.1",
        "7.2.2",
        "7.2.3",
        "7.2.4",
        "7.2.5",
        "7.4.0",
        "7.4.1",
        "7.4.2",
        "7.4.3",
        "latest"
      ],
      "metadata": {
        "description": "FortiManager version"
      }
    },
    "additionalCustomData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The ARM template provides a basic configuration. Additional configuration can be added here."
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "allowedValues": [
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_D4_v3",
        "Standard_D8_v3",
        "Standard_D16_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D4a_v4",
        "Standard_D8a_v4",
        "Standard_D16a_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D48as_v4",
        "Standard_D64as_v4",
        "Standard_D96as_v4",
        "Standard_D4_v5",
        "Standard_D8_v5",
        "Standard_D16_v5",
        "Standard_D32_v5",
        "Standard_D48_v5",
        "Standard_D64_v5",
        "Standard_D96_v5",
        "Standard_D4s_v5",
        "Standard_D8s_v5",
        "Standard_D16s_v5",
        "Standard_D32s_v5",
        "Standard_D48s_v5",
        "Standard_D64s_v5",
        "Standard_D96s_v5"
      ],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }
    },
    "highavailabilityMethod": {
      "type": "string",
      "defaultValue": "vrrp-external-loadbalancer",
      "allowedValues": [
        "manual",
        "vrrp-external-loadbalancer",
        "vrrp-internal-loadbalancer"
      ],
      "metadata": {
        "description": "choose how you want to get internet connectivity when you use internal loadbalancer"
      }
    },
    "availabilityOptions": {
      "type": "string",
      "allowedValues": [
        "Availability Set",
        "Availability Zones"
      ],
      "defaultValue": "Availability Zones",
      "metadata": {
        "description": "Deploy FortiManager VMs in an Availability Set or Availability Zones. If Availability Zones deployment is selected but the location does not support Availability Zones an Availability Set will be deployed. If Availability Zones deployment is selected and Availability Zones are available in the location, FortiManager A will be placed in Zone 1, FortiManager B will be placed in Zone 2"
      }
    },
    "publicIP1NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Identify if to use a public IP, and if so whether it's new"
      }
    },
    "publicIP1Name": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIP1ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "publicIP2NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Whether to use a public IP and if so whether it is new"
      }
    },
    "publicIP2Name": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIP2ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "publicIP3NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Whether to use a public IP and if so whether it is new"
      }
    },
    "publicIP3Name": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIP3ResourceGroup": {
      "type":"string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network (with new vnet the current resourcegroup is used)"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "FortiManagerSubnet",
      "metadata": {
        "description": "FortiManager Subnet"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.137.0/24",
      "metadata": {
        "description": "FortiManager Subnet Prefix"
      }
    },
    "subnet1StartAddress": {
      "type": "string",
      "defaultValue": "172.16.137.4",
      "metadata": {
        "description": "Subnet 1 start address, 2 or 3 consecutive private IPs are required"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "FortiManagerHASubnet",
      "metadata": {
        "description": "FortiManager HA Subnet"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.138.0/24",
      "metadata": {
        "description": "FortiManager HA Subnet Prefix"
      }
    },
    "subnet2StartAddress": {
      "type": "string",
      "defaultValue": "172.16.138.4",
      "metadata": {
        "description": "Subnet 1 start address, 2 consecutive private IPs are required"
      }
    },

    "serialConsole": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Enable Serial Console"
      }
    },
    "diskType": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS",
        "StandardSSD_LRS",
        "Premium_ZRS",
        "StandardSSD_ZRS",
        "Default"
      ],
      "metadata": {
        "description": "Type of all of the disks, this determines the IOPS and redudancy"
      }
    },
    "dataDiskSize": {
      "type": "string",
      "defaultValue": "1024",
      "metadata": {
        "description": "Size of the logfile data disk"
      }
    },
    "dataDiskCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of data disk"
      }
    },
    "fortiManagerLicenseBYOLA": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Primary FortiManager BYOL license content"
      }
    },
    "fortiManagerLicenseBYOLB": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Secondary FortiManager BYOL license content"
      }
    },
    "fortiManagerLicenseFortiFlexA": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Primary FortiManager BYOL FortiFlex license token"
      }
    },
    "fortiManagerLicenseFortiFlexB": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Secondary FortiManager BYOL FortiFlex license token"
      }
    },
    "fortiManagerSerialNumberA": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager A Serial Number"
      }
    },
    "fortiManagerSerialNumberB": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager B Serial Number"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {}
    },
    "fortinetTags": {
      "type": "object",
      "defaultValue": {
        "publisher": "Fortinet",
        "template": "FortiManager",
        "provider": "6EB3B02F-50E5-4A3E-8CB8-2E1292583FMG"
      }
    }
  },
  "variables": {
    "imagePublisher": "fortinet",
    "imageOffer": "fortinet-fortimanager",
    "availabilitySetName": "[concat(parameters('namePrefix'),'-availabilityset')]",
    "availabilitySetId": {
      "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
    },
    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('namePrefix'),'-vnet'),parameters('vnetName'))]",
    "subnet1Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), parameters('subnet1Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')))]",
    "subnet2Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), parameters('subnet2Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')))]",
    "fmgAVmName": "[concat(parameters('namePrefix'),'-fmg-a')]",
    "fmgBVmName": "[concat(parameters('namePrefix'),'-fmg-b')]",
    "customDataHeader": "Content-Type: multipart/mixed; boundary=\"12345\"\nMIME-Version: 1.0\n\n--12345\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"config\"\n\n",
    "fmgACustomDataHAManual": "[concat('config system ha\n set mode primary\n set clusterid 10\n set password ', base64(parameters('adminPassword')), '\n config peer\n edit 1\n set serial-number ', parameters('fortiManagerSerialNumberB'), '\n set ip ', variables('sn1IPfmgB'), '\n next\n next\n end\n')]",
    "fmgBCustomDataHAManual": "[concat('config system ha\n set mode secondary\n set clusterid 10\n set password ', base64(parameters('adminPassword')), '\n config peer\n edit 1\n set serial-number ', parameters('fortiManagerSerialNumberA'), '\n set ip ', variables('sn1IPfmgA'),'\n next\n next\n end\n')]",
    "fmgACustomDataHAVRRPelb": "[concat('config system ha\n set clusterid 10\n set failover-mode vrrp\n set hb-interval 5\n set hb-lost-threshold 10\n config monitored-ips\n edit 1\n set interface port2\n set ip ', variables('sn2IPfmgB'), '\nnext\n end\n set password ', base64(parameters('adminPassword')), '\n config peer\n edit 1\n set serial-number ', parameters('fortiManagerSerialNumberB'), '\n set ip ', variables('sn1IPfmgB'), '\n next\n end\n set priority 100\n set unicast enable\n set vip 1.2.3.4\n set vrrp-interface port1\n end\n')]",
    "fmgBCustomDataHAVRRPelb": "[concat('config system ha\n set clusterid 10\n set failover-mode vrrp\n set hb-interval 5\n set hb-lost-threshold 10\n config monitored-ips\n edit 1\n set interface port2\n set ip ', variables('sn2IPfmgA'), '\nnext\n end\n set password ', base64(parameters('adminPassword')), '\n config peer\n edit 1\n set serial-number ', parameters('fortiManagerSerialNumberA'), '\n set ip ', variables('sn1IPfmgA'),'\n next\n end\n set priority 100\n set unicast enable\n set vip 1.2.3.4\n set vrrp-interface port1\n end\n')]",
    "fmgACustomDataHAVRRPilb": "[concat('config system ha\n set clusterid 10\n set failover-mode vrrp\n set hb-interval 5\n set hb-lost-threshold 10\n config monitored-ips\n edit 1\n set interface port2\n set ip ', variables('sn2IPfmgB'), '\nnext\n end\n set password ', base64(parameters('adminPassword')), '\n config peer\n edit 1\n set serial-number ', parameters('fortiManagerSerialNumberB'), '\n set ip ', variables('sn1IPfmgB'), '\n next\n end\n set priority 100\n set unicast enable\n set vip 1.2.3.4\n set vrrp-interface port1\n end\n')]",
    "fmgBCustomDataHAVRRPilb": "[concat('config system ha\n set clusterid 10\n set failover-mode vrrp\n set hb-interval 5\n set hb-lost-threshold 10\n config monitored-ips\n edit 1\n set interface port2\n set ip ', variables('sn2IPfmgA'), '\nnext\n end\n set password ', base64(parameters('adminPassword')), '\n config peer\n edit 1\n set serial-number ', parameters('fortiManagerSerialNumberA'), '\n set ip ', variables('sn1IPfmgA'),'\n next\n end\n set priority 100\n set unicast enable\n set vip 1.2.3.4\n set vrrp-interface port1\n end\n')]",
    "fmgACustomDataBody": "[concat('config system global\n set admin-lockout-duration 120\n set hostname ', variables('fmgAVmName'), '\n end\nconfig system interface\nedit port1\nset mode static\nset ip ',  variables('sn1IPfmgA'), '/', variables('sn1CIDRmask'), '\nset description fortimanager\nset allowaccess ping ssh https\nnext\nedit port2\nset mode static\nset ip ',  variables('sn2IPfmgA'), '/', variables('sn2CIDRmask'), '\nset description fortimanager\nset allowaccess ping ssh https\nnext\nend\nconfig system route\nedit 1\nset dst 0.0.0.0/0\nset gateway ', variables('sn1GatewayIP'), '\nset device port1\nnext\nend\n', if(equals(parameters('highavailabilityMethod'),'manual'),variables('fmgACustomDataHAManual'),''), if(equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer'),variables('fmgACustomDataHAVRRPelb'),''), if(equals(parameters('highavailabilityMethod'),'vrrp-internal-loadbalancer'),variables('fmgACustomDataHAVRRPilb'),''), parameters('additionalCustomData'), variables('fmgACustomDataFortiFlex'))]",
    "fmgBCustomDataBody": "[concat('config system global\n set admin-lockout-duration 120\n set hostname ', variables('fmgBVmName'), '\n end\nconfig system interface\nedit port1\nset mode static\nset ip ',  variables('sn1IPfmgB'), '/', variables('sn1CIDRmask'), '\nset description fortimanager\nset allowaccess ping ssh https\nnext\nedit port2\nset mode static\nset ip ',  variables('sn2IPfmgB'), '/', variables('sn2CIDRmask'), '\nset description fortimanager\nset allowaccess ping ssh https\nnext\nend\nconfig system route\nedit 1\nset dst 0.0.0.0/0\nset gateway ', variables('sn1GatewayIP'), '\nset device port1\nnext\nend\n', if(equals(parameters('highavailabilityMethod'),'manual'),variables('fmgBCustomDataHAManual'),''), if(equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer'),variables('fmgBCustomDataHAVRRPelb'),''), if(equals(parameters('highavailabilityMethod'),'vrrp-internal-loadbalancer'),variables('fmgBCustomDataHAVRRPilb'),''), parameters('additionalCustomData'), variables('fmgBCustomDataFortiFlex'))]",
    "customDataLicenseHeader": "--12345\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"fmglicense\"\n\n",
    "customDataFooter": "\n--12345--\n",
    "fmgACustomDataFortiFlex": "[if(equals(parameters('fortiManagerLicenseFortiFlexA'),''),'',concat('exec vm-license ',parameters('fortiManagerLicenseFortiFlexA'), '\n'))]",
    "fmgBCustomDataFortiFlex": "[if(equals(parameters('fortiManagerLicenseFortiFlexB'),''),'',concat('exec vm-license ',parameters('fortiManagerLicenseFortiFlexB'), '\n'))]",
    "fmgAcustomDataCombined": "[concat(variables('customDataHeader'),variables('fmgACustomDataBody'), variables('customDataLicenseHeader'), parameters('fortiManagerLicenseBYOLA'), variables('customDataFooter'))]",
    "fmgBcustomDataCombined": "[concat(variables('customDataHeader'),variables('fmgBCustomDataBody'), variables('customDataLicenseHeader'), parameters('fortiManagerLicenseBYOLB'), variables('customDataFooter'))]",
    "fmgACustomData": "[base64(if(equals(parameters('fortiManagerLicenseBYOLA'),''),variables('fmgACustomDataBody'),variables('fmgACustomDataCombined')))]",
    "fmgBCustomData": "[base64(if(equals(parameters('fortiManagerLicenseBYOLB'),''),variables('fmgBCustomDataBody'),variables('fmgBCustomDataCombined')))]",
    "fmgANic1Name": "[concat(variables('fmgAVmName'),'-nic1')]",
    "fmgANic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fmgANic1Name'))]",
    "fmgANic2Name": "[concat(variables('fmgAVmName'),'-nic2')]",
    "fmgANic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fmgANic2Name'))]",
    "fmgBNic1Name": "[concat(variables('fmgBVmName'),'-nic1')]",
    "fmgBNic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fmgBNic1Name'))]",
    "fmgBNic2Name": "[concat(variables('fmgBVmName'),'-nic2')]",
    "fmgBNic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fmgBNic2Name'))]",
    "publicIP1Name": "[if(equals(parameters('publicIP1Name'),''),concat(parameters('namePrefix'),'-fmg-a-pip'),parameters('publicIP1Name'))]",
    "publicIP1Id": "[if(equals(parameters('publicIP1NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP1Name')),if(equals(parameters('publicIP1NewOrExisting'),'existing'),resourceId(parameters('publicIP1ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP1Name')),''))]",
    "publicIPAddress1Id": {
      "id": "[variables('publicIP1Id')]"
    },
    "publicIP2Name": "[if(equals(parameters('publicIP2Name'),''),concat(parameters('namePrefix'),'-fmg-b-pip'),parameters('publicIP2Name'))]",
    "publicIP2Id": "[if(equals(parameters('publicIP2NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP2Name')),resourceId(parameters('publicIP2ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP2Name')))]",
    "publicIPAddress2Id": {
      "id": "[variables('publicIP2Id')]"
    },
    "publicIP3Name": "[if(equals(parameters('publicIP3Name'),''),concat(parameters('namePrefix'),'-externalloadbalancer-pip'),parameters('publicIP2Name'))]",
    "publicIP3Id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP3Name'))]",
    "serialConsoleEnabled": "[if(equals(parameters('serialConsole'),'yes'),'true','false')]",
    "NSGName": "[concat(parameters('namePrefix'),'-',uniqueString(resourceGroup().id),'-nsg')]",
    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
    "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
    "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
    "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
    "sn1IPStartAddress": "[split(parameters('subnet1StartAddress'),'.')]",
    "sn1IPilb": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',int(variables('sn1IPStartAddress')[3]))]",
    "sn1IPfmgA": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPStartAddress')[3]),1))]",
    "sn1IPfmgB": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPStartAddress')[3]),2))]",
    "sn2IPArray": "[if(equals(parameters('subnet2Prefix'),''),split('1.2.3.4','.'),split(parameters('subnet2Prefix'),'.'))]",
    "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
    "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
    "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2IPStartAddress": "[split(parameters('subnet2StartAddress'),'.')]",
    "sn2IPfmgA": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPStartAddress')[3]),1))]",
    "sn2IPfmgB": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPStartAddress')[3]),2))]",
    "internalLBName": "[concat(parameters('namePrefix'),'-internalloadbalancer')]",
    "internalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('internalLBName'))]",
    "internalLBFEName": "[concat(parameters('namePrefix'),'-ilb-',parameters('subnet2Name'),'-frontend')]",
    "internalLBFEId": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('internalLBName'),variables('internalLBFEName'))]",
    "internalLBBEName": "[concat(parameters('namePrefix'),'-ilb-',parameters('subnet2Name'),'-backend')]",
    "internalLBBEId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('internalLBName'),variables('internalLBBEName'))]",
    "internalLBProbeName": "lbprobe",
    "internalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes',variables('internalLBName'),variables('internalLBProbeName'))]",
    "internalLoadBalancerBackendAddressPools": [
      {
        "id": "[variables('internalLBBEId')]"
      }
    ],
    "externalLBName": "[concat(parameters('namePrefix'),'-externalloadbalancer')]",
    "externalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLBName'))]",
    "externalLBFEName": "[concat(parameters('namePrefix'),'-elb-',parameters('subnet1Name'),'-frontend')]",
    "externalLBFEId": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('externalLBName'),variables('externalLBFEName'))]",
    "externalLBBEName": "[concat(parameters('namePrefix'),'-elb-',parameters('subnet1Name'),'-backend')]",
    "externalLBBEId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('externalLBName'),variables('externalLBBEName'))]",
    "externalLBProbeName": "lbprobe",
    "externalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes',variables('externalLBName'),variables('externalLBProbeName'))]",
    "externalLoadBalancerBackendAddressPools": [
      {
        "id": "[variables('externalLBBEId')]"
      }
    ],
    "externalLoadBalancerNatRulesFMGa": [
      {
        "id": "[variables('externalLBId_NatRule_SSH_fmga')]"
      },
      {
        "id": "[variables('externalLBId_NatRule_WEB_fmga')]"
      }
    ],
    "externalLoadBalancerNatRulesFMGb": [
      {
        "id": "[variables('externalLBId_NatRule_SSH_fmgb')]"
      },
      {
        "id": "[variables('externalLBId_NatRule_WEB_fmgb')]"
      }
    ],
    "externalLBName_NatRule_WEB_fmga": "[concat(variables('fmgaVmName'),'WEB')]",
    "externalLBId_NatRule_WEB_fmga": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_WEB_fmga'))]",
    "externalLBName_NatRule_SSH_fmga": "[concat(variables('fmgaVmName'),'SSH')]",
    "externalLBId_NatRule_SSH_fmga": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_SSH_fmga'))]",
    "externalLBName_NatRule_WEB_fmgb": "[concat(variables('fmgbVmName'),'WEB')]",
    "externalLBId_NatRule_WEB_fmgb": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_WEB_fmgb'))]",
    "externalLBName_NatRule_SSH_fmgb": "[concat(variables('fmgbVmName'),'SSH')]",
    "externalLBId_NatRule_SSH_fmgb": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'),variables('externalLBName_NatRule_SSH_fmgb'))]",

    "useAZ": "[and(not(empty(pickZones('Microsoft.Compute', 'virtualMachines', parameters('location')))), equals(parameters('availabilityOptions'), 'Availability Zones'))]",
    "pipZones": "[if(variables('useAZ'), pickZones('Microsoft.Network', 'publicIPAddresses', parameters('location'), 3), json('null'))]",
    "zone1": [
      "1"
    ],
    "zone2": [
      "2"
    ],
    "zones": [
      "1",
      "2",
      "3"
    ]
  },
  "resources": [
    {
      "apiVersion": "2022-09-01",
      "name": "pid-21c3b606-4b14-4eca-ad0d-1d8537ebd14e-partnercenter",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[not(variables('useAZ'))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2023-03-01",
      "name": "[variables('availabilitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'),'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[and(equals(parameters('vnetNewOrExisting'), 'new'),not(equals(parameters('highavailabilityMethod'),'manual')))]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2023-04-01",
      "name": "[concat(variables('vnetName'),'/', parameters('subnet2Name'))]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "addressPrefix": "[parameters('subnet2Prefix')]"
      }
    },
    {
      "apiVersion": "2023-04-01",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('NSGName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowSSHInbound",
            "properties": {
              "description": "Allow SSH In",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowHTTPInbound",
            "properties": {
              "description": "Allow 80 In",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowHTTPSInbound",
            "properties": {
              "description": "Allow 443 In",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowDevRegInbound",
            "properties": {
              "description": "Allow 541 in for device registration",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "541",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowLogsInbound",
            "properties": {
              "description": "Allow 514 in for inbound logging",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "514",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 140,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowRemoteAccessInbound",
            "properties": {
              "description": "Allow 8082 in for remote access to FortiManager",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8082",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 150,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowAllOutbound",
            "properties": {
              "description": "Allow all out",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "condition": "[and(equals(parameters('highavailabilityMethod'),'manual'),equals(parameters('publicIP1NewOrExisting'), 'new'))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIP1Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "zones": "[variables('pipZones')]",
      "properties": {
        "publicIPAllocationMethod": "static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(variables('publicIP1Name')), '-', uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "condition": "[and(equals(parameters('highavailabilityMethod'),'manual'),equals(parameters('publicIP2NewOrExisting'), 'new'))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIP2Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "zones": "[variables('pipZones')]",
      "properties": {
        "publicIPAllocationMethod": "static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(variables('publicIP2Name')), '-', uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "condition": "[equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIP3Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "sku": {
        "name": "Standard"
      },
      "zones": "[variables('pipZones')]",
      "properties": {
        "publicIPAllocationMethod": "static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(variables('publicIP3Name')), '-', uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "condition": "[equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('externalLBName')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/loadBalancers']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('publicIP3Name')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('externalLBFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIP3Id')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('externalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 541,
              "backendPort": 541,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "ExternalLBRule-FE-devreg"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 514,
              "backendPort": 514,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "ExternalLBRule-FE-logs"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8082,
              "backendPort": 8082,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "ExternalLBRule-FE-remote-access-fgt"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Udp",
              "frontendPort": 10551,
              "backendPort": 10551,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "ExternalLBRule-FE-udp10551"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ],
        "inboundNatRules": [
          {
            "name": "[variables('externalLBName_NatRule_SSH_fmga')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50030,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_WEB_fmga')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 40030,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_SSH_fmgb')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50031,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_WEB_fmgb')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 40031,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('highavailabilityMethod'),'vrrp-internal-loadbalancer')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('internalLBName')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/loadBalancers']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('internalLBFEName')]",
            "properties": {
              "privateIPAddress": "[variables('sn1IPilb')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              }
            },
            "zones": "[variables('pipZones')]"
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('internalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('internalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('internalLBBEId')]"
              },
              "probe": {
                "id": "[variables('internalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 541,
              "backendPort": 541,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "InternalLBRule-FE-devreg"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('internalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('internalLBBEId')]"
              },
              "probe": {
                "id": "[variables('internalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 514,
              "backendPort": 514,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "InternalLBRule-FE-logs"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('internalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('internalLBBEId')]"
              },
              "probe": {
                "id": "[variables('internalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8082,
              "backendPort": 8082,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "InternalLBRule-FE-remote-access-fgt"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fmgANic1Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('NSGName')]",
        "[variables('externalLBName')]",
        "[variables('internalLBName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfmgA')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": "[if(and(not(equals(parameters('publicIP1NewOrExisting'), 'none')),equals(parameters('highavailabilityMethod'),'manual')), variables('publicIPAddress1Id'), json('null'))]",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerBackendAddressPools": "[if(equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer'),variables('externalLoadBalancerBackendAddressPools'),json('null'))]",
              "loadBalancerInboundNatRules": "[if(equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer'),variables('externalLoadBalancerNatRulesFMGa'),json('null'))]"
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fmgANic2Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfmgA')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fmgBNic1Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('NSGName')]",
        "[variables('externalLBName')]",
        "[variables('internalLBName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfmgB')]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": "[if(and(not(equals(parameters('publicIP2NewOrExisting'), 'none')),equals(parameters('highavailabilityMethod'),'manual')), variables('publicIPAddress2Id'), json('null'))]",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerBackendAddressPools": "[if(equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer'),variables('externalLoadBalancerBackendAddressPools'),json('null'))]",
              "loadBalancerInboundNatRules": "[if(equals(parameters('highavailabilityMethod'),'vrrp-external-loadbalancer'),variables('externalLoadBalancerNatRulesFMGb'),json('null'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fmgBNic2Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfmgB')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fmgAVmName')]",
      "apiVersion": "2023-03-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "zones": "[if(variables('useAZ'), variables('zone1'), json('null'))]",
      "plan": {
        "name": "[parameters('imageSku')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('fmgANic1Name')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "osProfile": {
          "computerName": "[variables('fmgAVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('fmgACustomData')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSku')]",
            "version": "[parameters('imageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[if(not(equals(parameters('diskType'), 'Default')), parameters('diskType') , json('null'))]"
            }
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": "[parameters('dataDiskCount')]",
              "input": {
                "name": "[concat(variables('fmgAVmName'),'-DataDisk-',copyIndex('dataDisks'))]",
                "diskSizeGB": "[parameters('dataDiskSize')]",
                "lun": "[copyIndex('dataDisks')]",
                "createOption": "Empty",
                "managedDisk": {
                  "storageAccountType": "[if(not(equals(parameters('diskType'), 'Default')), parameters('diskType') , json('null'))]"
                }
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('fmgANic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fmgANic2Id')]"
            }

          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('serialConsoleEnabled')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fmgBVmName')]",
      "apiVersion": "2023-03-01",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "zones": "[if(variables('useAZ'), variables('zone2'), json('null'))]",
      "plan": {
        "name": "[parameters('imageSku')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('fmgBNic1Name')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": "[if(not(variables('useAZ')), variables('availabilitySetId'), json('null'))]",
        "osProfile": {
          "computerName": "[variables('fmgBVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('fmgBCustomData')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSku')]",
            "version": "[parameters('imageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[if(not(equals(parameters('diskType'), 'Default')), parameters('diskType') , json('null'))]"
            }
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": "[parameters('dataDiskCount')]",
              "input": {
                "name": "[concat(variables('fmgBVmName'),'-DataDisk-',copyIndex('dataDisks'))]",
                "diskSizeGB": "[parameters('dataDiskSize')]",
                "lun": "[copyIndex('dataDisks')]",
                "createOption": "Empty",
                "managedDisk": {
                  "storageAccountType": "[if(not(equals(parameters('diskType'), 'Default')), parameters('diskType') , json('null'))]"
                }
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('fmgBNic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fmgBNic2Id')]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('serialConsoleEnabled')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "fortiManagerACustomData": {
      "type": "string",
      "value": "[variables('fmgACustomData')]"
    },
    "fortiManagerBCustomData": {
      "type": "string",
      "value": "[variables('fmgBCustomData')]"
    }
  }
}
