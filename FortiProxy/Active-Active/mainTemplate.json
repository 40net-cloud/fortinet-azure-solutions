{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the FortiProxy VM."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the FortiProxy VM."
      }
    },
    "fortiProxyCount": {
      "type": "int",
      "metadata": {
        "description": "Number of FortiProxy VM instances to deploy"
      }
    },
    "fortiProxyNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Naming prefix for all deployed resources. The FortiProxy VM will have the suffix '-fpx'. For example if the prefix is 'acme-01' the FortiProxy will be named 'acme-01-vm-fpx'"
      }
    },
    "fortiProxyImageSKU": {
      "type": "string",
      "defaultValue": "fpx-vm-byol",
      "allowedValues": [
        "fpx-vm-byol"
      ],
      "metadata": {
        "description": "Identifies to use BYOL license model. (the licenses are purchased separately)"
      }
    },
    "fortiProxyImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "7.0.16",
        "7.0.17",
        "7.2.10",
        "7.2.9",
        "7.4.3",
        "7.4.4",
        "latest"
      ],
      "metadata": {
        "description": "Select the image version"
      }
    },
    "fortiProxyAdditionalCustomData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The ARM template provides a basic configuration."
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_F2s",
      "allowedValues": [
        "Standard_F2s",
        "Standard_F4s",
        "Standard_F8s",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8",
        "Standard_F16",
        "Standard_F2s_v2",
        "Standard_F4s_v2",
        "Standard_F8s_v2",
        "Standard_F16s_v2",
        "Standard_F32s_v2",
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_DS3_v2",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D2_v4",
        "Standard_D4_v4",
        "Standard_D8_v4",
        "Standard_D16_v4",
        "Standard_D32_v4",
        "Standard_D2s_v4",
        "Standard_D4s_v4",
        "Standard_D8s_v4",
        "Standard_D16s_v4",
        "Standard_D32s_v4",
        "Standard_D2a_v4",
        "Standard_D4a_v4",
        "Standard_D8a_v4",
        "Standard_D16a_v4",
        "Standard_D32a_v4",
        "Standard_D2as_v4",
        "Standard_D4as_v4",
        "Standard_D8as_v4",
        "Standard_D16as_v4",
        "Standard_D32as_v4",
        "Standard_D2_v5",
        "Standard_D4_v5",
        "Standard_D8_v5",
        "Standard_D16_v5",
        "Standard_D32_v5",
        "Standard_D2s_v5",
        "Standard_D4s_v5",
        "Standard_D8s_v5",
        "Standard_D16s_v5",
        "Standard_D32s_v5",
        "Standard_D2as_v5",
        "Standard_D4as_v5",
        "Standard_D8as_v5",
        "Standard_D16as_v5",
        "Standard_D32as_v5",
        "Standard_D2ads_v5",
        "Standard_D4ads_v5",
        "Standard_D8ads_v5",
        "Standard_D16ads_v5",
        "Standard_D32ads_v5"
      ],
      "metadata": {
        "description": "Virtual Machine size/instance type selection"
      }
    },
    "externalLoadBalancer": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Install an external load balancer and subnet or not."
      }
    },
    "outboundConnectivity": {
      "type": "string",
      "defaultValue": "external-nat-device",
      "allowedValues": [
        "per-node-standard-sku-pip",
        "deploy-nat-gateway",
        "external-nat-device"
      ],
      "metadata": {
        "description": "choose how you want to get internet connectivity when you use internal loadbalancer"
      }
    },
    "availabilityOptions": {
      "type": "string",
      "allowedValues": [
        "Availability Set",
        "Availability Zones"
      ],
      "defaultValue": "Availability Set",
      "metadata": {
        "description": "Deploy FortiProxy VMs in an Availability Set or Availability Zones. If Availability Zones deployment is selected but the location does not support Availability Zones an Availability Set will be deployed. If Availability Zones deployment is selected and Availability Zones are available in the location, FortiProxy A will be placed in Zone 1, FortiProxy B will be placed in Zone 2"
      }
    },
    "acceleratedNetworking": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": [
        "false",
        "true"
      ],
      "metadata": {
        "description": "Accelerated Networking enables direct connection between the VM and network card. Only available on 2 CPU F/Fs and 4 CPU D/Dsv2, D/Dsv3, E/Esv3, Fsv2, Lsv2, Ms/Mms and Ms/Mmsv2"
      }
    },
    "publicIP1NewOrExistingOrNone": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Public IP address for the Load Balancer for inbound and outbound data of the FortiProxy VMs"
      }
    },
    "publicIP1Name": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of Public IP address, if no name is provided the default name will be the Resource Group Name as the Prefix and '-fpx-pip' as the suffix"
      }
    },
    "publicIP1ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Public IP Resource Group, this value is required if an existing Public IP is selected."
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing Virtual Network."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network, required if utilizing and existing VNET. If no name is provided the default name will be the Resource Group Name as the Prefix and '-vnet' as the suffix."
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing virtual network, leave blank if a new VNET is being utilized"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "fpxsubnet",
      "metadata": {
        "description": "Subnet 1 Name"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/26",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet1StartAddress": {
      "type": "string",
      "defaultValue": "172.16.136.4",
      "metadata": {
        "description": "Subnet 1 start address, 1 or more consecutive private IPs are required"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "fpxhasubnet",
      "metadata": {
        "description": "Subnet 2 Name"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.64/26",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "subnet2StartAddress": {
      "type": "string",
      "defaultValue": "172.16.136.68",
      "metadata": {
        "description": "Subnet 2 start address, 1 or more consecutive private IPs are required"
      }
    },
    "serialConsole": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Enable Serial Console"
      }
    },
    "fortiManager": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Connect to FortiManager"
      }
    },
    "fortiManagerIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager IP or DNS name to connect to on port TCP/541"
      }
    },
    "fortiManagerSerial": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiManager serial number to add the deployed FortiProxy into the FortiManager"
      }
    },
    "fortiProxyLicenseBYOL1": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 1 BYOL license content"
      }
    },
    "fortiProxyLicenseBYOL2": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 2 BYOL license content"
      }
    },
    "fortiProxyLicenseBYOL3": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 3 BYOL license content"
      }
    },
    "fortiProxyLicenseBYOL4": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 4 BYOL license content"
      }
    },
    "fortiProxyLicenseBYOL5": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 5 BYOL license content"
      }
    },
    "fortiProxyLicenseBYOL6": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 6 BYOL license content"
      }
    },
    "fortiProxyLicenseBYOL7": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 7 BYOL license content"
      }
    },
    "fortiProxyLicenseBYOL8": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "FortiProxy 8 BYOL license content"
      }
    },
    "customImageReference": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "By default, the deployment will use Azure Marketplace images. In specific cases, using BYOL custom FortiProxy images can be deployed. This requires a reference "
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {}
    },
    "fortinetTags": {
      "type": "object",
      "defaultValue": {
        "publisher": "Fortinet",
        "template": "FortiProxy-Active-Active-ELB-or-ILB",
        "provider": "6EB3B02F-50E5-4A3E-8CB8-2E12925831FPXAA"
      }
    }
  },
  "variables": {
    "imagePublisher": "fortinet",
    "imageOffer": "fortinet-fortiproxy",
    "availabilitySetName": "[concat(parameters('fortiProxyNamePrefix'),'-availabilityset')]",
    "availabilitySetId": {
      "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
    },
    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('fortiProxyNamePrefix'),'-vnet'),parameters('vnetName'))]",
    "subnet1Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')))]",
    "subnet2Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')))]",
    "fpxVmName": "[concat(parameters('fortiProxyNamePrefix'),'-fpx-vm')]",
    "fmgCustomData": "[if(equals(parameters('fortiManager'),'yes'),concat('\nconfig system central-management\nset type fortimanager\n set fmg ',parameters('fortiManagerIP'),'\nset serial-number ', parameters('fortiManagerSerial'), '\nend\n config system interface\n edit port1\n append allowaccess fgfm\n end\n config system interface\n edit port2\n append allowaccess fgfm\n end\n'),'')]",
    "customDataHeader": "Content-Type: multipart/mixed; boundary=\"12345\"\nMIME-Version: 1.0\n\n--12345\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"config\"\n\n",
    "customDataBodyShared": "[concat('config system sdn-connector\nedit AzureSDN\nset type azure\nnext\nend\nconfig router static\nedit 1\nset dst 0.0.0.0/0\nset device port1\nset gateway ', variables('sn1GatewayIP'), '\nnext\nend', variables('fmgCustomData'), parameters('fortiProxyAdditionalCustomData'), '\n')]",
    "customDataLicenseHeader": "--12345\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"license\"\n\n",
    "customDataFooter": "\n--12345--\n",
    "serialConsoleEnabled": "[if(equals(parameters('serialConsole'),'yes'),'true','false')]",
    "publicIP1Name": "[if(equals(parameters('publicIP1Name'),''),concat(parameters('fortiProxyNamePrefix'),'-fpx-pip'),parameters('publicIP1Name'))]",
    "publicIP1Id": "[if(equals(parameters('publicIP1NewOrExistingOrNone'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP1Name')),resourceId(parameters('publicIP1ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP1Name')))]",
    "sn1CidrObject": "[parseCidr(parameters('subnet1Prefix'))]",
    "sn1Octets4": "[split(variables('sn1CidrObject').firstUsable,'.')]",
    "sn1IPStartAddress": "[split(parameters('subnet1StartAddress'),'.')]",
    "sn1GatewayIP": "[variables('sn1CidrObject').firstUsable]",
    "sn2CidrObject": "[parseCidr(parameters('subnet2Prefix'))]",
    "sn2Octets4": "[split(variables('sn2CidrObject').firstUsable,'.')]",
    "sn2IPStartAddress": "[split(parameters('subnet2StartAddress'),'.')]",
    "license": "[createArray(parameters('fortiProxyLicenseBYOL1'), parameters('fortiProxyLicenseBYOL2'), parameters('fortiProxyLicenseBYOL3'), parameters('fortiProxyLicenseBYOL4'), parameters('fortiProxyLicenseBYOL5'), parameters('fortiProxyLicenseBYOL6'), parameters('fortiProxyLicenseBYOL7'), parameters('fortiProxyLicenseBYOL8'))]",
    "copy": [
      {
        "name": "sn1IP",
        "count": 9,
        "input": "[cidrHost(parameters('subnet1Prefix'), range(sub(int(variables('sn1IPStartAddress')[3]),int(variables('sn1Octets4')[3])), 9)[copyIndex('sn1IP')])]"
      },
      {
        "name": "sn2IP",
        "count": 9,
        "input": "[cidrHost(parameters('subnet2Prefix'), range(sub(int(variables('sn2IPStartAddress')[3]),int(variables('sn2Octets4')[3])), 9)[copyIndex('sn2IP')])]"
      },
      {
        "name": "attachedpipName",
        "count": 8,
        "input": "[if(equals(parameters('publicIP1Name'),''),concat(parameters('fortiProxyNamePrefix'),'-fpx-pip',copyIndex('attachedpipName')),concat(parameters('publicIP1Name'),copyIndex('attachedpipName')))]"
      },
      {
        "name": "attachedpipId",
        "count": 8,
        "input": "[if(equals(parameters('publicIP1NewOrExistingOrNone'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('attachedpipName')[copyIndex('attachedpipId')]),resourceId(parameters('publicIP1ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('attachedpipName')[copyIndex('attachedpipId')]))]"
      },
      {
        "name": "attachedpipaddressId",
        "count": 8,
        "input": {
          "id": "[variables('attachedpipId')[copyIndex('attachedpipaddressId')]]"
        }
      },
      {
        "name": "interfaceCustomData",
        "count": 8,
        "input": "[concat('config system interface\n edit port1\n set ip ',variables('sn1IP')[copyIndex('interfaceCustomData',1)],'/',variables('sn1CidrObject').cidr,'\nset mode static\n set description proxy\n set allowaccess ping ssh https probe-response\n next\n edit port2\nset ip ',variables('sn2IP')[copyIndex('interfaceCustomData',1)],'/',variables('sn2CidrObject').cidr,'\nset mode static\nset description hasync\nnext\nend\n')]"
      },
      {
        "name": "haPeerCustomData",
        "count": 8,
        "input": "[concat('config unicast-peers\n', ha.unicastpeers(variables('sn2IP'),parameters('fortiProxyCount'),copyIndex('haPeerCustomData',1)), '\nend\n')]"
      },
      {
        "name": "haCustomData",
        "count": 8,
        "input": "[concat('config system ha\nset group-name fpx-cluster\nset mode config-sync-only\nset password ', parameters('adminPassword'), '\nset hbdev port2 0\nset override disable\nset priority 255\nset monitor port1\nset unicast-status enable\n', variables('haPeerCustomData')[copyIndex('haCustomData')],'\nend\n')]"
      },
      {
        "name": "customDataBody",
        "count": "[length(range(1, 8))]",
        "input": "[concat(variables('interfaceCustomData')[copyIndex('customDataBody')],variables('customDataBodyShared'),variables('haCustomData')[copyIndex('customDataBody')])]"
      },
      {
        "name": "customDataCombined",
        "count": "[length(range(1, 8))]",
        "input": "[concat(variables('customDataHeader'),variables('customDataBody')[copyIndex('customDataCombined')],variables('customDataLicenseHeader'), variables('license')[copyIndex('customDataCombined')], variables('customDataFooter'))]"
      },
      {
        "name": "customData",
        "count": "[length(range(1, 8))]",
        "input": "[base64(if(equals(variables('license')[copyIndex('customData')],''),variables('customDataBody')[copyIndex('customData')],variables('customDataCombined')[copyIndex('customData')]))]"
      }
    ],
    "internalLBName": "[concat(parameters('fortiProxyNamePrefix'),'-internalloadbalancer')]",
    "internalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('internalLBName'))]",
    "internalLBFEName": "[concat(parameters('fortiProxyNamePrefix'),'-ilb-',parameters('subnet1Name'),'-frontend')]",
    "internalLBFEId": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('internalLBName'),variables('internalLBFEName'))]",
    "internalLBBEName": "[concat(parameters('fortiProxyNamePrefix'),'-ilb-',parameters('subnet1Name'),'-backend')]",
    "internalLBBEId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('internalLBName'),variables('internalLBBEName'))]",
    "internalLBProbeName": "lbprobe",
    "internalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes',variables('internalLBName'),variables('internalLBProbeName'))]",
    "externalLBName": "[concat(parameters('fortiProxyNamePrefix'),'-externalloadbalancer')]",
    "externalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLBName'))]",
    "externalLBFEName": "[concat(parameters('fortiProxyNamePrefix'),'-elb-',parameters('subnet1Name'),'-frontend')]",
    "externalLBFEId": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations',variables('externalLBName'),variables('externalLBFEName'))]",
    "externalLBBEName": "[concat(parameters('fortiProxyNamePrefix'),'-elb-',parameters('subnet1Name'),'-backend')]",
    "externalLBBEId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools',variables('externalLBName'),variables('externalLBBEName'))]",
    "externalLBProbeName": "lbprobe",
    "externalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes',variables('externalLBName'),variables('externalLBProbeName'))]",
    "natGWName": "[concat(parameters('fortiProxyNamePrefix'),'-natgateway')]",
    "useAZ": "[and(not(empty(pickZones('Microsoft.Compute', 'virtualMachines', parameters('location')))), equals(parameters('availabilityOptions'), 'Availability Zones'))]",
    "pipZones": "[if(variables('useAZ'), pickZones('Microsoft.Network', 'publicIPAddresses', parameters('location'), 3), json('null'))]",
    "imageReferenceMarketplace": {
      "publisher": "[variables('imagePublisher')]",
      "offer": "[variables('imageOffer')]",
      "sku": "[parameters('fortiProxyImageSKU')]",
      "version": "[parameters('fortiProxyImageVersion')]"
    },
    "imageReferenceCustomImage": {
      "id": "[parameters('customImageReference')]"
    },
    "virtualMachinePlan": {
      "name": "[parameters('fortiProxyImageSKU')]",
      "publisher": "[variables('imagePublisher')]",
      "product": "[variables('imageOffer')]"
    },
    "loadBalancerInboundNatRules": [
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-1-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-1-mgmt-ssh'))]"
        }
      ],
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-2-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-2-mgmt-ssh'))]"
        }
      ],
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-3-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-3-mgmt-ssh'))]"
        }
      ],
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-4-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-4-mgmt-ssh'))]"
        }
      ],
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-5-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-5-mgmt-ssh'))]"
        }
      ],
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-6-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-6-mgmt-ssh'))]"
        }
      ],
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-7-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-7-mgmt-ssh'))]"
        }
      ],
      [
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-8-mgmt-https'))]"
        },
        {
          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-8-mgmt-ssh'))]"
        }
      ]
    ],
    "nsgName": "[concat(parameters('fortiProxyNamePrefix'),'-nsg')]",
    "nsgId": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('nsgName'))]",
    "nsgRules": [
      [
        "nsgrule-ssh-in",
        "Allow SSH In",
        "Tcp",
        "*",
        "22",
        "*",
        "*",
        "Allow",
        100,
        "Inbound"
      ],
      [
        "nsgrule-http-in",
        "Allow HTTP In",
        "Tcp",
        "*",
        "80",
        "*",
        "*",
        "Allow",
        "110",
        "Inbound"
      ],
      [
        "nsgrule-https-in",
        "Allow HTTPS In",
        "Tcp",
        "*",
        "443",
        "*",
        "*",
        "Allow",
        "120",
        "Inbound"
      ],
      [
        "nsgrule-fpx-in",
        "Allow Proxy (8080) In",
        "Tcp",
        "*",
        "8080",
        "*",
        "*",
        "Allow",
        "130",
        "Inbound"
      ],
      [
        "nsgrule-fmg-in",
        "Allow FortiManager (541) In",
        "Tcp",
        "*",
        "541",
        "*",
        "*",
        "Allow",
        "140",
        "Inbound"
      ],
      [
        "nsgrule-all-out",
        "Allow All Out",
        "*",
        "*",
        "*",
        "*",
        "*",
        "Allow",
        "105",
        "Outbound"
      ]
    ]
  },
  "functions": [
    {
      "namespace": "ha",
      "members": {
        "unicastpeers": {
          "parameters": [
            {
              "name": "sn2IP",
              "type": "array"
            },
            {
              "name": "count",
              "type": "int"
            },
            {
              "name": "fgtnr",
              "type": "int"
            }
          ],
          "output": {
            "type": "string",
            "value": "[if( greater(parameters('fgtnr'),parameters('count')), '', concat(if(and(greater(parameters('count'),0),not(equals(parameters('fgtnr'),1))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[1],'\nnext\n'),''), if(and(greater(parameters('count'),1),not(equals(parameters('fgtnr'),2))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[2],'\nnext\n'),''), if(and(greater(parameters('count'),2),not(equals(parameters('fgtnr'),3))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[3],'\nnext\n'),''), if(and(greater(parameters('count'),3),not(equals(parameters('fgtnr'),4))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[4],'\nnext\n'),''), if(and(greater(parameters('count'),4),not(equals(parameters('fgtnr'),5))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[5],'\nnext\n'),''), if(and(greater(parameters('count'),5),not(equals(parameters('fgtnr'),6))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[6],'\nnext\n'),''), if(and(greater(parameters('count'),6),not(equals(parameters('fgtnr'),7))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[7],'\nnext\n'),''), if(and(greater(parameters('count'),7),not(equals(parameters('fgtnr'),8))),concat('edit 0\nset peer-ip ',parameters('sn2IP')[8],'\nnext\n'),'')))]"
          }
        }
      }
    }
  ],
  "resources": [
    {
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('fortiProxyNamePrefix'), '-fortinetdeployment-', uniquestring(resourceGroup().id))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[not(variables('useAZ'))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2023-03-01",
      "name": "[variables('availabilitySetName')]",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/availabilitySets'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Compute/availabilitySets']), parameters('fortinetTags')) ]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "name": "[variables('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/virtualNetworks']), parameters('fortinetTags')) ]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet1Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet1Prefix')]"
            }
          },
          {
            "name": "[parameters('subnet2Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet2Prefix')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(parameters('externalLoadBalancer')),equals(parameters('outboundConnectivity'),'deploy-nat-gateway'))]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2023-04-01",
      "name": "[concat(variables('vnetName'),'/', parameters('subnet1Name'))]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[resourceId('Microsoft.Network/natGateways', variables('natGWName'))]"
      ],
      "properties": {
        "addressPrefix": "[parameters('subnet1Prefix')]",
        "natGateway": {
          "id": "[resourceId('Microsoft.Network/natGateways', variables('natGWName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups']), parameters('fortinetTags')) ]",
      "properties": {
        "copy": [
          {
            "name": "securityRules",
            "count": "[length(variables('nsgRules'))]",
            "input": {
              "name": "[variables('nsgRules')[copyIndex('securityRules')][0]]",
              "properties": {
                "description": "[variables('nsgRules')[copyIndex('securityRules')][1]]",
                "protocol": "[variables('nsgRules')[copyIndex('securityRules')][2]]",
                "sourcePortRange": "[variables('nsgRules')[copyIndex('securityRules')][3]]",
                "destinationPortRange": "[variables('nsgRules')[copyIndex('securityRules')][4]]",
                "sourceAddressPrefix": "[variables('nsgRules')[copyIndex('securityRules')][5]]",
                "destinationAddressPrefix": "[variables('nsgRules')[copyIndex('securityRules')][6]]",
                "access": "[variables('nsgRules')[copyIndex('securityRules')][7]]",
                "priority": "[variables('nsgRules')[copyIndex('securityRules')][8]]",
                "direction": "[variables('nsgRules')[copyIndex('securityRules')][9]]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[or(parameters('externalLoadBalancer'),not(equals(parameters('outboundConnectivity'),'deploy-nat-gateway')))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIP1Name')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/publicIPAddresses']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "zones": "[variables('pipZones')]",
      "properties": {
        "publicIPAllocationMethod": "static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('fortiProxyNamePrefix')), '-', uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "condition": "[equals(parameters('outboundConnectivity'),'per-node-standard-sku-pip')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIP1Name'),copyIndex(1))]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/publicIPAddresses']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiProxyCount')]"
      },
      "zones": "[variables('pipZones')]",
      "properties": {
        "publicIPAllocationMethod": "static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('fortiProxyNamePrefix')), '-',copyIndex(1),uniquestring(resourceGroup().id))]"
        }
      }
    },
    {
      "condition": "[parameters('externalLoadBalancer')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('externalLBName')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/loadBalancers']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('publicIP1Name')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('externalLBFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIP1Id')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('externalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "externallbrule-fe-proxy"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8080,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "condition": "[parameters('externalLoadBalancer')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('externalLBName'), '/', variables('fpxVmName'), '-', copyIndex(1), '-mgmt-ssh')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('externalLBId')]"
      ],
      "copy": {
        "name": "inboundNatRulesSSH",
        "count": "[parameters('fortiProxyCount')]"
      },
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('externalLBFEId')]"
        },
        "protocol": "Tcp",
        "frontendPort": "[copyIndex(50030)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "condition": "[parameters('externalLoadBalancer')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('externalLBName'), '/', variables('fpxVmName'), '-', copyIndex(1), '-mgmt-https')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('externalLBId')]"
      ],
      "copy": {
        "name": "inboundNatRulesHTTPS",
        "count": "[parameters('fortiProxyCount')]"
      },
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('externalLBFEId')]"
        },
        "protocol": "Tcp",
        "frontendPort": "[copyIndex(40030)]",
        "backendPort": 443,
        "enableFloatingIP": false
      }
    },
    {
      "condition": "[not(parameters('externalLoadBalancer'))]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('internalLBName')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/loadBalancers']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('internalLBFEName')]",
            "properties": {
              "privateIPAddress": "[variables('sn1IP')[0]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              }
            },
            "zones": "[if(variables('useAZ'), variables('pipZones'), json('null'))]"
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('internalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('internalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('internalLBBEId')]"
              },
              "probe": {
                "id": "[variables('internalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "internallbrule-fe-proxy"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8008,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "condition": "[and(not(parameters('externalLoadBalancer')),equals(parameters('outboundConnectivity'),'deploy-nat-gateway'))]",
      "type": "Microsoft.Network/natGateways",
      "name": "[variables('natGWName')]",
      "apiVersion": "2023-04-01",
      "location": "[parameters('location')]",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/natGateways'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/natGateways']), parameters('fortinetTags')) ]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('publicIP1Name')]"
      ],
      "properties": {
        "idleTimeoutInMinutes": 4,
        "publicIpAddresses": [
          {
            "id": "[variables('publicIP1Id')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('fpxVmName'),'-',copyIndex(1),'-nic1')]",
      "apiVersion": "2023-04-01",
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiProxyCount')]"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkInterfaces']), parameters('fortinetTags')) ]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]",
        "[variables('NSGId')]",
        "[variables('internalLBId')]",
        "[variables('attachedpipId')[copyIndex(1)]]",
        "[variables('externalLBId')]",
        "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-', copyIndex(1),'-mgmt-ssh'))]",
        "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules',variables('externalLBName'), concat(variables('fpxVmName'),'-', copyIndex(1),'-mgmt-https'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IP')[copyIndex(1)]]",
              "privateIPAllocationMethod": "Static",
              "publicIPAddress": "[if(and(not(equals(parameters('publicIP1NewOrExistingOrNone'), 'none')),equals(parameters('outboundConnectivity'),'per-node-standard-sku-pip')), variables('attachedpipaddressId')[copyIndex(1)] , json('null'))]",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[if(parameters('externalLoadBalancer'),variables('externalLBBEId'),variables('internalLBBEId'))]"
                }
              ],
              "loadBalancerInboundNatRules": "[if(parameters('externalLoadBalancer'), variables('loadBalancerInboundNatRules')[copyIndex()], json('null'))]"
            }
          }
        ],
        "enableIPForwarding": false,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]",
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('fpxVmName'),'-',copyIndex(1),'-nic2')]",
      "apiVersion": "2023-04-01",
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiProxyCount')]"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Network/networkInterfaces']), parameters('fortinetTags')) ]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IP')[copyIndex(1)]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              }
            }
          }
        ],
        "enableIPForwarding": false,
        "enableAcceleratedNetworking": "[parameters('acceleratedNetworking')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('fpxVmName'),'-',copyIndex(1))]",
      "apiVersion": "2023-03-01",
      "copy": {
        "name": "nodeCopy",
        "count": "[parameters('fortiProxyCount')]"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), union(parameters('fortinetTags'),parameters('tagsByResource')['Microsoft.Compute/virtualMachines']), parameters('fortinetTags')) ]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat(variables('fpxVmName'),'-',copyIndex(1),'-nic1')]",
        "[concat(variables('fpxVmName'),'-',copyIndex(1),'-nic2')]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "zones": "[if(variables('useAZ'), array(add(1, mod(copyIndex(), length(variables('pipZones'))))), json('null'))]",
      "plan": "[if(and(equals(parameters('fortiProxyImageSKU'),'fortinet-fortiproxy'),not(equals(parameters('customImageReference'),''))), json('null'), variables('virtualMachinePlan'))]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": "[if(not(variables('useAZ')), variables('availabilitySetId'), json('null'))]",
        "osProfile": {
          "computerName": "[concat(variables('fpxVmName'),'-',copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('customData')[copyIndex()]]"
        },
        "storageProfile": {
          "imageReference": "[if(and(equals(parameters('fortiProxyImageSKU'),'fortinet-fortiproxy'),not(equals(parameters('customImageReference'),''))), variables('imageReferenceCustomImage'), variables('imageReferenceMarketplace'))]",
          "osDisk": {
            "name": "[tolower(concat(variables('fpxVmName'),'-',copyIndex(1), '-osdisk'))]",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[tolower(concat(variables('fpxVmName'),'-',copyIndex(1), '-disk'))]",
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "copy": [
            {
              "name": "networkInterfaces",
              "count": "[if(parameters('externalLoadBalancer'), 2, 1)]",
              "input": {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('fpxVmName'),'-',copyIndex(1),'-nic',copyIndex('networkInterfaces',1)))]",
                "properties": {
                  "primary": "[if(equals(copyIndex('networkInterfaces',1),1), 'true', 'false')]"
                }
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('serialConsoleEnabled')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "fortiProxyPublicIP": {
      "type": "string",
      "value": "[if(and(equals(parameters('publicIP1NewOrExistingOrNone'), 'new'),parameters('externalLoadBalancer')), reference(variables('publicIP1Id')).ipAddress, '')]"
    },
    "fortiProxyFQDN": {
      "type": "string",
      "value": "[if(and(equals(parameters('publicIP1NewOrExistingOrNone'), 'new'),parameters('externalLoadBalancer')), reference(variables('publicIP1Id')).dnsSettings.fqdn, '' )]"
    }
  }
}
