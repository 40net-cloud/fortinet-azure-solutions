{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        
        "resourceNamePrefix": {
            "defaultValue": "fsa",
            "minLength": 3,
            "maxLength": 48,
            "type": "string",
            "metadata": {
                "description": "Name prefix for resources which the FortiSandbox template create."
            }
        },
        "instanceType": {
			"type": "string",
			"defaultValue": "Standard_B4ms",
			"allowedValues": [
				"Standard_F4s",
				"Standard_F8s",
				"Standard_F16s",
				"Standard_F4",
				"Standard_F8",
				"Standard_F16",
				"Standard_F8s_v2",
				"Standard_F16s_v2",
				"Standard_F32s_v2",
				"Standard_DS3_v2",
				"Standard_DS4_v2",
				"Standard_DS5_v2",
				"Standard_D8s_v3",
				"Standard_D16s_v3",
				"Standard_D32s_v3",
				"Standard_B4ms",
				"Standard_B2ms"
      ],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }  
        },
        "vmAdminUsername": {
            "type": "string",
			"defaultValue": "Default Username 'admin'",
			"metadata": {
				"description": "Default Username for the Virtual Machine is always 'admin'."
			}
        },
     
        "vmAdminPassword": {
			"type": "string",
			"defaultValue": "Default Password Vm-id",
			"metadata": {
				"description": "Get Vm-id for the FortiSandbox VM using the Azure CLI command: az vm list â€“output tsv -g [Your resource group]"
      }
        },
        
        "fortiSandboxImageSKU":{
           "type": "string",
			"defaultValue": "fortinet_fsa-vm",
			"allowedValues": [
				"fortinet_fsa-vm",
				"fortinet_fsa-vm_payg"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately)"
      }
        },
        "fortiSandboxImageVersion":{
            "type": "string",
			"defaultValue": "latest",
			"allowedValues": [
				"4.0.1",
				"4.0.2",
				"latest"
			],
			"metadata": {
			"description": "fortiSandbox Version"
      }
        },
		"location": {
		  "type": "string",
		  "defaultValue": "[resourceGroup().location]",
		  "metadata": {
			"description": "Location for all resources."
		  }
		},
		
		"availabilityOptions": {
		  "type": "string",
		  "allowedValues": [
			"Availability Set",
			"Availability Zones"
		],
      "defaultValue": "Availability Set",
      "metadata": {
        "description": "Deploy FortiSandbox VMs in an Availability Set or Availability Zones. If Availability Zones deployment is selected but the location does not support Availability Zones an Availability Set will be deployed. If Availability Zones deployment is selected and Availability Zones are available in the location, FortiGate A will be placed in Zone 1, FortiGate B will be placed in Zone 2"
			}
		},
        "vmCount":{
            "type":"int",
            "defaultValue": 2,
            "minValue": 1,
            "maxValue": 8,
            "metadata":{
                "description":"Number of Fortisandbox instances . Minimum is 1, Maximum is 8."
            }
        },
        "vnetNewOrExisting": {
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "type": "string",
            "metadata": {
                "description": "Identify whether to use a new or existing vnet."
            }
        },
        "vnetResourceGroup": {
            "defaultValue": "[resourceGroup().name]",
            "type": "string",
            "metadata": {
                "description": "Name of the existing virtual network, if the field vnetNewOrExisting value is existing, this field is required."
            }
        },
        "vnetName": {
            "defaultValue": "fsavnet",
            "minLength": 3,
            "maxLength": 48,
            "type": "string",
            "metadata": {
                "description": "Name of the Azure virtual network, if the field vnetNewOrExisting value is new, the virtual network with the appointed name will be created. Must be 3-48 characters in length."
            }
        },
        "vnetAddressPrefix": {
            "defaultValue": "10.0.0.0/16",
            "type": "string",
            "metadata": {
                "description": "Virtual Network Address prefix, if the field vnetNewOrExisting value is new, this field is required."
            }
        },
        "vnetSubnet1Name": {
            "defaultValue": "MgmtSubnet",
            "minLength": 3,
            "maxLength": 48,
            "type": "string",
            "metadata": {
                "description": "Name of Subnet1 in the virtual network, if the field vnetNewOrExisting value is new, the subnet with the appointed name will be created. Must be 3-48 characters in length."
            }
        },
        "vnetSubnet1Prefix": {
            "defaultValue": "10.0.1.0/24",
            "type": "string",
            "metadata": {
               "description": "Prefix of Subnet1 in the virtual network, if the field vnetNewOrExisting value is new, this field is required."
            }
        },
        "vnetSubnet2Name": {
            "defaultValue": "CustomWindowsSubnet",
            "minLength": 3,
            "maxLength": 48,
            "type": "string",
            "metadata": {
                "description": "Name of Subnet2 in the virtual network, if the field vnetNewOrExisting value is new, the subnet with the appointed name will be created. Must be 3-48 characters in length."
            }
        },
        "vnetSubnet2Prefix": {
            "defaultValue": "10.0.2.0/24",
            "type": "string",
            "metadata": {
                 "description": "Prefix of Subnet2 in the virtual network, if the field vnetNewOrExisting value is new, this field is required."
            }
        },
		
		"vnetSubnet3Name": {
            "defaultValue": "HASyncSubnet",
            "minLength": 3,
            "maxLength": 48,
            "type": "string",
            "metadata": {
                "description": "Name of Subnet3 in the virtual network, if the field vnetNewOrExisting value is new, the subnet with the appointed name will be created. Must be 3-48 characters in length."
            }
        },
        "vnetSubnet3Prefix": {
            "defaultValue": "10.0.3.0/24",
            "type": "string",
            "metadata": {
                 "description": "Prefix of Subnet3 in the virtual network, if the field vnetNewOrExisting value is new, this field is required."
            }
        },
        
		"publicIPNewOrExisting": {
			  "type": "string",
			  "defaultValue": "new",
			  "allowedValues": [
				"new",
				"existing"
			  ],
		  "metadata": {
			"description": "Public IP for FortiSandbox VMs"
			}
		},
		"PublicIPNamePrefix": {
		  "type": "string",
		  "defaultValue": "",
		  "metadata": {
			"description": "Name of Public IP address"
		  }
		},
		"publicIPResourceGroup": {
		  "type": "string",
		  "defaultValue": "",
		  "metadata": {
			"description": "Public IP Resource Group, this value is required if an existing Public IP is selected"
		  }
		}
    },

    "variables":{
		"imagePublisher": "fortinet",
		"imageOffer": "fortinet_fortisandbox_vm",
        "networkApiVersion":"2021-03-01",
        "virtualNetworkName":"[parameters('vnetName')]",
        "subnet1ID": "[resourceId(parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('VnetSubnet1Name'))]",
        "subnet2ID": "[resourceId(parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('VnetSubnet2Name'))]",
		"subnet3ID": "[resourceId(parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('VnetSubnet3Name'))]",
        "vmNamePrefix":"[concat(parameters('resourceNamePrefix'), '-vm')]",
		"NicHeartBeatIPNamePrefix":"[concat(parameters('resourceNamePrefix'), '-Hbsync','-nic3','-Vm')]",
        "NicCustomWindowsIPNamePrefix":"[concat(parameters('resourceNamePrefix'), '-CustomWindows','-nic2','-Vm')]",
        "NicPublicIPNamePrefix":"[concat(parameters('resourceNamePrefix'), '-Mgmt','-nic1','-Vm')]",
        "PublicIPNamePrefix":"[concat(parameters('PublicIPNamePrefix'), '-nicPublic','-IP')]",
        "publicIPId": "[if(equals(parameters('publicIPNewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('PublicIPNamePrefix')),resourceId(parameters('publicIPResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('PublicIPNamePrefix')))]",
        "netSecGroupname":"[concat(parameters('resourceNamePrefix'), '-securityGroup')]",
        
        
        "availabilitySetName":"[concat(parameters('resourceNamePrefix'), '-availabilitySet')]",
		"availabilitySetId": {
			"id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
			},
        
        "useAZ": "[and(not(empty(pickZones('Microsoft.Compute', 'virtualMachines', parameters('location')))), equals(parameters('availabilityOptions'), 'Availability Zones'))]"
	
        

        
    },
    
    "resources":[
    {
      "apiVersion": "2021-03-01",
      "type": "Microsoft.Compute/availabilitySets",
      "condition": "[not(variables('useAZ'))]",
      "name": "[variables('availabilitySetName')]",
      "location": "[parameters('location')]",
	  
      "properties": {
        "platformFaultDomainCount": "[if(greater(parameters('vmCount'), 3),3, parameters('vmCount'))]",
        "platformUpdateDomainCount": "[if(greater(parameters('vmCount'), 3),3, parameters('vmCount'))]"
      },
      "sku": {
        "name": "Aligned"
      }
    },
        {
            "apiVersion":"[variables('networkApiVersion')]",
            "type":"Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location":"[parameters('location')]",
            "properties":{
                "addressSpace":{
                    "addressPrefixes":[
                        "[parameters('vnetAddressPrefix')]"
                    ]
                },
                "subnets":[
                    {
                        "name":"[parameters('vnetSubnet1Name')]",
                        "properties":{
                            "addressPrefix":"[parameters('vnetSubnet1Prefix')]"
                        }
                    },
                    {
                        "name":"[parameters('vnetSubnet2Name')]",
                        "properties":{
                             "addressPrefix":"[parameters('vnetSubnet2Prefix')]"
                        }
                    },
					{
                        "name":"[parameters('vnetSubnet3Name')]",
                        "properties":{
                            "addressPrefix":"[parameters('vnetSubnet3Prefix')]"
                        }
                    }
					
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('netSecGroupname'))]"
            ],
            "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]"
        },
        {
            "apiVersion":"[variables('networkApiVersion')]",
            "type":"Microsoft.Network/networkInterfaces",
            "name":"[concat(variables('NicPublicIPNamePrefix'), copyIndex(1))]",
            "location":"[parameters('location')]",
            "properties":{
                "networkSecurityGroup":{
                    "id":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('netSecGroupname'))]"
                 },
                "ipConfigurations":[
                    {
                        "name":"ipconfig1",
                        "properties":{
                            "primary": true,
                            "privateIPAllocationMethod": "Dynamic",
                            "privateIPAddressVersion": "IPv4",

                            "subnet":{
                                "id": "[variables('subnet1ID')]"
                            },
                            "publicIPAddress":{
                                "id":"[concat(variables('publicIPId'), copyIndex(1))]"
                            }
                            
                        }
                    }
                ]
            },
             "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
               
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('netSecGroupname'))]"
            ],
            "copy":{
                "name":"nicloop",
                "count":"[parameters('vmCount')]"
            }
        },
        {
            "apiVersion":"[variables('networkApiVersion')]",
            "type":"Microsoft.Network/networkInterfaces",
            "name":"[concat(variables('NicCustomWindowsIPNamePrefix'), copyIndex(1))]",
            "location":"[parameters('location')]",
            "properties":{
                "ipConfigurations":[
                    {
                        "name":"ipconfig1",
                        "properties":{
                            "privateIPAllocationMethod": "Dynamic",
                            "privateIPAddressVersion": "IPv4",
                            "subnet":{
                                 "id": "[variables('subnet2ID')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking":false,
                "enableIPForwarding": false
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
                
            ],
            "copy":{
                "name":"nicloop",
                "count":"[parameters('vmCount')]"
            }
        },
		{
            "apiVersion":"[variables('networkApiVersion')]",
            "type":"Microsoft.Network/networkInterfaces",
            "name":"[concat(variables('NicHeartBeatIPNamePrefix'), copyIndex(1))]",
            "location":"[parameters('location')]",
            "properties":{
                "ipConfigurations":[
                    {
                        "name":"ipconfig1",
                        "properties":{
                            "privateIPAllocationMethod": "Dynamic",
                            "privateIPAddressVersion": "IPv4",
                            "subnet":{
                                 "id": "[variables('subnet3ID')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking":false,
                "enableIPForwarding": false
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
                
            ],
            "copy":{
                "name":"nicloop",
                "count":"[parameters('vmCount')]"
            }
        },
        
        {
            "condition": "[equals(parameters('publicIPNewOrExisting'), 'new')]",
			"apiVersion": "[variables('networkApiVersion')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('PublicIPNamePrefix'), copyIndex(1))]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "copy":{
                "name":"PublicIPCopy",
                "count":"[parameters('vmCount')]"
            }
        },
        
        {
            "apiVersion":"[variables('networkApiVersion')]",
            "type":"Microsoft.Network/networkSecurityGroups",
            "name":"[variables('netSecGroupname')]",
            "location":"[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allowSSH",
                        "properties": {
                        "description": "Allow SSH traffic",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowHTTP",
                        "properties": {
                            "description": "Allow http business flow",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1010,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowHTTPs",
                        "properties": {
                            "description": "Allow https business flow",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1020,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowManageHTTP",
                        "properties": {
                            "description": "Allow http web management flow",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1030,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowManageHTTPs",
                        "properties": {
                            "description": "Allow https web management flow",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1040,
                            "direction": "Inbound"
                        }
                    }
                ]
            }

        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('vmNamePrefix'),copyIndex(1))]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[parameters('location')]",
            "zones": "[if(variables('useAZ'),array(add(mod(copyIndex(),3),1)), json('null'))]",
			"plan": {
				"name": "[parameters('fortiSandboxImageSKU')]",
				"publisher": "[variables('imagePublisher')]",
				"product": "[variables('imageOffer')]"
				},
            "tags":{
                "[variables('vmNamePrefix')]" : "[parameters('resourceNamePrefix')]"
            },
            "copy":{
                 "name":"InstanceCopy",
                 "count":"[parameters('vmCount')]"
            },

            "properties": {
                "availabilitySet": "[if(not(variables('useAZ')), variables('availabilitySetId'), json('null'))]",
				
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                },
				"storageProfile": {
					"imageReference": {
						"publisher": "[variables('imagePublisher')]",
						"offer": "[variables('imageOffer')]",
						"sku": "[parameters('fortiSandboxImageSKU')]",
						"version": "[parameters('fortiSandboxImageVersion')]"
					},
					  "osDisk": {
						"createOption": "FromImage"
					  },
					  "dataDisks": [
						{
						  "diskSizeGB": 30,
						  "lun": 0,
						  "createOption": "Empty"
						}
					]		
				}
                ,
                "osProfile": {
                    "computerName": "[concat(variables('vmNamePrefix'), copyindex(1))]",
                    "adminUsername": "[parameters('vmAdminUserName')]",
                    "adminPassword": "[parameters('vmAdminPassword')]"
                    
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NicPublicIPNamePrefix'), copyIndex(1)))]",
                            "properties": {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NicCustomWindowsIPNamePrefix'), copyIndex(1)))]",
                            "properties": {
                                "primary": false
                            }
                        },
						{
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NicHeartBeatIPNamePrefix'), copyIndex(1)))]",
                            "properties": {
                                "primary": false
                            }
                        }
						
                    ]
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NicPublicIPNamePrefix'), copyIndex(1)))]",
                "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NicCustomWindowsIPNamePrefix'), copyIndex(1)))]",
				"[resourceId('Microsoft.Network/networkInterfaces', concat(variables('NicHeartBeatIPNamePrefix'), copyIndex(1)))]"
            ]
        }
    ]
	
}
